// This file is auto-generated by @hey-api/openapi-ts

export type GetUploadPresignedUrlForResumeResponseDTO = {
    survey_result_id: number;
    file_path: string;
    file_name: string;
    file_mime_type: string | null;
    presigned_url: string;
};

export type SearchJob = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    is_published: boolean;
    workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'ACTIVE' | 'INACTIVE';
    delay_email_in_minutes: number | null;
    pipeline_id: number;
    total_applications: number;
    uploaded_resumes: number;
    completed_assessments: number;
    created_by_user: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        first: string;
        last: string;
        email: string;
        auth_role: 'COMPANY_OWNER' | 'COMPANY_USER' | 'SUPER_ADMIN' | 'FRANCHISE_OWNER' | 'FRANCHISE_USER';
    };
    updated_by_user: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        first: string;
        last: string;
        email: string;
        auth_role: 'COMPANY_OWNER' | 'COMPANY_USER' | 'SUPER_ADMIN' | 'FRANCHISE_OWNER' | 'FRANCHISE_USER';
    } | null;
    archived_by_user: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        first: string;
        last: string;
        email: string;
        auth_role: 'COMPANY_OWNER' | 'COMPANY_USER' | 'SUPER_ADMIN' | 'FRANCHISE_OWNER' | 'FRANCHISE_USER';
    } | null;
    company: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        name: string;
        slug: string;
    };
    location: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    department: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    job_application_template: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
    };
};

export type workflow_status = 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';

export type status = 'ACTIVE' | 'INACTIVE';

export type auth_role = 'COMPANY_OWNER' | 'COMPANY_USER' | 'SUPER_ADMIN' | 'FRANCHISE_OWNER' | 'FRANCHISE_USER';

export type SearchJobsResponseDTO = {
    total_pages: number;
    current_page: number;
    next_page: number | null;
    previous_page: number | null;
    records: Array<SearchJob>;
    total_records: number;
};

export type GetJobPublicResponseDTO = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'ACTIVE' | 'INACTIVE';
    delay_email_in_minutes: number | null;
    ideal_candidate_description: string | null;
    pipeline_id: number;
    created_by_user_id: number;
    updated_by_user_id: number | null;
    archived_by_user_id: number | null;
    workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    is_published: boolean;
    company: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        name: string;
        slug: string;
        logo_file_path: string | null;
        s3_logo_link: string | null;
    };
    location: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    department: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    job_application_template: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
    };
};

export type GetPublicJobsResponseDTO = {
    total_pages: number;
    current_page: number;
    next_page: number | null;
    previous_page: number | null;
    records: Array<{
        id: number;
        uuid: string;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        is_test: boolean;
        title: string;
        raw_description: string | null;
        benchmark: string | null;
        status: 'ACTIVE' | 'INACTIVE';
        delay_email_in_minutes: number | null;
        ideal_candidate_description: string | null;
        pipeline_id: number;
        created_by_user_id: number;
        updated_by_user_id: number | null;
        archived_by_user_id: number | null;
        workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
        is_published: boolean;
        company: {
            id: number;
            created_at: string | null | string | unknown;
            updated_at: string | null | string | unknown;
            archived_at: string | null | string | unknown;
            name: string;
            slug: string;
            logo_file_path: string | null;
            s3_logo_link: string | null;
        };
        location: {
            id: number;
            created_at: string | null | string | unknown;
            updated_at: string | null | string | unknown;
            name: string;
            company_id: number | null;
        } | null;
        department: {
            id: number;
            created_at: string | null | string | unknown;
            updated_at: string | null | string | unknown;
            name: string;
            company_id: number | null;
        } | null;
        job_application_template: {
            id: number;
            created_at: string | null | string | unknown;
            updated_at: string | null | string | unknown;
            archived_at: string | null | string | unknown;
            pages: Array<{
                questions: Array<{
                    key: string;
                    label: string;
                    type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                    required: boolean;
                    options?: Array<(string | number)> | null;
                    screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
                }>;
            }>;
        };
    }>;
    total_records: number;
};

export type CreateJobResponseDTO = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'ACTIVE' | 'INACTIVE';
    delay_email_in_minutes: number | null;
    ideal_candidate_description: string | null;
    pipeline_id: number;
    created_by_user_id: number;
    updated_by_user_id: number | null;
    archived_by_user_id: number | null;
    company_id: number;
    location_id: number | null;
    department_id: number | null;
    non_negotiables: string | null;
    evaluation_criteria: {
        education: number;
        certifications: number;
        total_experience: number;
        relevant_experience: number;
        skills: number;
        previous_roles: number;
    } | null;
    workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    is_published: boolean;
    job_application_template: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        is_test: boolean;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
        created_by_user_id: number;
        updated_by_user_id: number | null;
        archived_by_user_id: number | null;
        job_id: number;
    };
};

export type CreateJobRequestBodyDTO = {
    title: string;
    status: 'ACTIVE' | 'INACTIVE';
    company_id: number;
    pipeline_id: number;
    is_test?: boolean;
    benchmark?: string | null;
    raw_description?: string | null;
    ideal_candidate_description?: string | null;
    non_negotiables?: string | null;
    evaluation_criteria?: {
        education: number;
        certifications: number;
        total_experience: number;
        relevant_experience: number;
        skills: number;
        previous_roles: number;
    } | null;
    department_id?: number | null;
    location_id?: number | null;
    delay_email_in_minutes?: number | null;
    pages: Array<{
        questions: Array<{
            key: string;
            label: string;
            type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
            required: boolean;
            options?: Array<(string | number)> | null;
            screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
        }>;
    }>;
};

export type Job = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'ACTIVE' | 'INACTIVE';
    delay_email_in_minutes: number | null;
    ideal_candidate_description: string | null;
    pipeline_id: number;
    created_by_user_id: number;
    updated_by_user_id: number | null;
    archived_by_user_id: number | null;
    company_id: number;
    location_id: number | null;
    department_id: number | null;
    non_negotiables: string | null;
    evaluation_criteria: {
        education: number;
        certifications: number;
        total_experience: number;
        relevant_experience: number;
        skills: number;
        previous_roles: number;
    } | null;
    workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    is_published: boolean;
};

export type GetJobsResponseDTO = {
    total_pages: number;
    current_page: number;
    next_page: number | null;
    previous_page: number | null;
    records: Array<Job>;
    total_records: number;
};

export type GetJobResponseDTO = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'ACTIVE' | 'INACTIVE';
    delay_email_in_minutes: number | null;
    ideal_candidate_description: string | null;
    pipeline_id: number;
    created_by_user_id: number;
    updated_by_user_id: number | null;
    archived_by_user_id: number | null;
    non_negotiables: string | null;
    evaluation_criteria: {
        education: number;
        certifications: number;
        total_experience: number;
        relevant_experience: number;
        skills: number;
        previous_roles: number;
    } | null;
    workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    is_published: boolean;
    total_applications: number;
    uploaded_resumes: number;
    completed_assessments: number;
    s3_import_candidates_link?: string | null;
    company: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        name: string;
        slug: string;
        logo_file_path: string | null;
        s3_logo_link: string | null;
    };
    location: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    department: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    job_application_template: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
    };
};

export type UpdateJobResponseDTO = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'ACTIVE' | 'INACTIVE';
    delay_email_in_minutes: number | null;
    ideal_candidate_description: string | null;
    pipeline_id: number;
    created_by_user_id: number;
    updated_by_user_id: number | null;
    archived_by_user_id: number | null;
    company_id: number;
    location_id: number | null;
    department_id: number | null;
    non_negotiables: string | null;
    evaluation_criteria: {
        education: number;
        certifications: number;
        total_experience: number;
        relevant_experience: number;
        skills: number;
        previous_roles: number;
    } | null;
    workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    is_published: boolean;
    job_application_template: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        is_test: boolean;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
        created_by_user_id: number;
        updated_by_user_id: number | null;
        archived_by_user_id: number | null;
        job_id: number;
    };
};

export type UpdateJobRequestBodyDTO = {
    title?: string;
    status?: 'ACTIVE' | 'INACTIVE';
    company_id?: number;
    pipeline_id?: number;
    workflow_status?: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    is_published?: boolean;
    is_test?: boolean;
    benchmark?: string | null;
    raw_description?: string | null;
    ideal_candidate_description?: string | null;
    non_negotiables?: string | null;
    evaluation_criteria?: {
        education: number;
        certifications: number;
        total_experience: number;
        relevant_experience: number;
        skills: number;
        previous_roles: number;
    } | null;
    department_id?: number | null;
    location_id?: number | null;
    delay_email_in_minutes?: number | null;
    pages?: Array<{
        questions: Array<{
            key: string;
            label: string;
            type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
            required: boolean;
            options?: Array<(string | number)> | null;
            screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
        }>;
    }>;
    job_application_template_id: number;
};

export type DeleteJobResponseDTO = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'ACTIVE' | 'INACTIVE';
    delay_email_in_minutes: number | null;
    ideal_candidate_description: string | null;
    pipeline_id: number;
    created_by_user_id: number;
    updated_by_user_id: number | null;
    archived_by_user_id: number | null;
    non_negotiables: string | null;
    evaluation_criteria: {
        education: number;
        certifications: number;
        total_experience: number;
        relevant_experience: number;
        skills: number;
        previous_roles: number;
    } | null;
    workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    is_published: boolean;
    total_applications: number;
    uploaded_resumes: number;
    completed_assessments: number;
    s3_import_candidates_link?: string | null;
    company: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        name: string;
        slug: string;
        logo_file_path: string | null;
        s3_logo_link: string | null;
    };
    location: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    department: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    job_application_template: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
    };
};

export type ArchiveJobResponseDTO = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'ACTIVE' | 'INACTIVE';
    delay_email_in_minutes: number | null;
    ideal_candidate_description: string | null;
    pipeline_id: number;
    created_by_user_id: number;
    updated_by_user_id: number | null;
    archived_by_user_id: number | null;
    non_negotiables: string | null;
    evaluation_criteria: {
        education: number;
        certifications: number;
        total_experience: number;
        relevant_experience: number;
        skills: number;
        previous_roles: number;
    } | null;
    workflow_status: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
    is_published: boolean;
    total_applications: number;
    uploaded_resumes: number;
    completed_assessments: number;
    s3_import_candidates_link?: string | null;
    company: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        name: string;
        slug: string;
        logo_file_path: string | null;
        s3_logo_link: string | null;
    };
    location: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    department: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        name: string;
        company_id: number | null;
    } | null;
    job_application_template: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
    };
};

export type ApplyJobResponseDTO = {
    candidate_reference: string;
    candidate_application_link: string;
    survey_result: {
        id: number;
        created: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        last_score_calculation_at: string | null | string | unknown;
        application_responses: Array<{
            question: string;
            response: string;
        }> | null;
        company: string;
        company_id: number | null;
        company_slug: string | null;
        checked: string | null;
        countryCode: string;
        city: string;
        column_position: number | null;
        department_id: number | null;
        location_id: number | null;
        e3_adjectives: string | null;
        e3_chart: string | null;
        e3_scales: string | null;
        e3_scales21: string | null;
        email: string;
        first: string;
        industry: string;
        ip: string;
        is_test: boolean;
        last: string;
        misc: string;
        phone: string | null;
        status: string;
        region: string;
        region_name: string;
        role: string;
        sid: string;
        starred: number;
        time_to_complete_in_minutes: string | null;
        utm_campaign: string;
        utm_content: string;
        utm_medium: string;
        utm_source: string;
        utm_term: string;
        zip: string;
        resume_link: string | null;
        resume_file_path: string | null;
        resume_file_name: string | null;
        resume_file_mime_type: string | null;
        resume_uploaded_by_user_id: number | null;
        legacy_table_name: string | null;
        legacy_table_id: number | null;
        pipeline_id: string | null;
        pipeline_stage_id: string | null;
        stage_id: number | null;
        opportunity_id: string | null;
        contact_id: string | null;
        language_registered: string | null;
        language_submitted: string | null;
        imported_checksum: string | null;
    };
    job_application_response: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        is_test: boolean;
        title: string;
        raw_description: string | null;
        benchmark: string | null;
        status: 'IN_PROGRESS' | 'SUBMITTED' | 'ACCEPTED' | 'REJECTED';
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
                value: string | number | boolean | Array<(string)> | unknown;
                is_passed?: boolean | null;
            }>;
        }>;
        last_page_index: number;
        candidate_reference: string | null;
        opt_in_communications: boolean;
        opt_in_communications_at: string | null | string | unknown;
        job_id: number;
        survey_result_id: number;
    };
};

export type status2 = 'IN_PROGRESS' | 'SUBMITTED' | 'ACCEPTED' | 'REJECTED';

export type UploadPresignedUrlForImportCandidatesUploadPresignedUrlResponseDTO = {
    job_id: number;
    file_path: string;
    file_name: string;
    file_mime_type: string | null;
    presigned_url: string;
    import_checksum: string;
};

export type UpdateImportCandidatesStatusResponseDTO = {
    job_id: number;
    status: 'FILE_UPLOADING' | 'FILE_UPLOADED' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED';
};

export type status3 = 'FILE_UPLOADING' | 'FILE_UPLOADED' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED';

export type GetImportCandidatesStatusResponseDTO = {
    id: number;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    status: 'FILE_UPLOADING' | 'FILE_UPLOADED' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED';
    file_path: string;
    checksum: string;
    total_records: number;
    total_records_processed: number | null;
    total_records_with_duplicates: number | null;
    total_records_with_errors: number | null;
    job_id: number;
    s3_link: string;
};

export type JobApplicationTemplate = {
    id: number;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    pages: Array<{
        questions: Array<{
            key: string;
            label: string;
            type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
            required: boolean;
            options?: Array<(string | number)> | null;
            screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
        }>;
    }>;
    created_by_user_id: number;
    updated_by_user_id: number | null;
    archived_by_user_id: number | null;
    job_id: number;
};

export type JobApplicationResponse = {
    id: number;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    title: string;
    raw_description: string | null;
    benchmark: string | null;
    status: 'IN_PROGRESS' | 'SUBMITTED' | 'ACCEPTED' | 'REJECTED';
    pages: Array<{
        questions: Array<{
            key: string;
            label: string;
            type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
            required: boolean;
            options?: Array<(string | number)> | null;
            screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            value: string | number | boolean | Array<(string)> | unknown;
            is_passed?: boolean | null;
        }>;
    }>;
    last_page_index: number;
    candidate_reference: string | null;
    opt_in_communications: boolean;
    opt_in_communications_at: string | null | string | unknown;
    job_id: number;
    survey_result_id: number;
};

export type UpdateJobApplicationResponseRequestBodyDTO = {
    last_page_index?: number;
    opt_in_communications?: boolean;
    pages: Array<{
        questions: Array<{
            key: string;
            label: string;
            type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
            required: boolean;
            options?: Array<(string | number)> | null;
            screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            value: string | number | boolean | Array<(string)> | unknown;
            is_passed?: boolean | null;
        }>;
    }>;
};

export type GetJobApplicationResponsesResponseDTO = {
    total_pages: number;
    current_page: number;
    next_page: number | null;
    previous_page: number | null;
    records: Array<JobApplicationResponse>;
    total_records: number;
};

export type GetPipelinesResponseDTO = Array<{
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    ghl_id: string | null;
    company_id: number;
    deleted_at: string | null;
    stages: Array<{
        id: string;
        created_at: string;
        updated_at: string;
        name: string;
        position: number;
        ghl_id: string | null;
        pipeline_id: string;
        deleted_at: string | null;
    }>;
}>;

export type TraitScaleMappingReport = {
    id: number;
    uuid: string;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    is_test: boolean;
    name: string;
    description: string | null;
    strong_weight: number | null;
    moderate_weight: number | null;
    is_active: boolean;
    thresholds: Array<unknown>;
    sections: Array<unknown>;
};

export type PostSurveyResultsTrackEventData = {
    requestBody?: {
        survey_result_id: number;
        event_type: string;
        timestamp: string;
        metadata?: {
            [key: string]: unknown;
        };
    };
};

export type PostSurveyResultsTrackEventResponse = {
    message: string;
};

export type DeleteSurveyResultsBulkArchiveData = {
    requestBody?: {
        survey_result_ids: Array<(number)>;
    };
};

export type DeleteSurveyResultsBulkArchiveResponse = string;

export type PutSurveyResultsBulkUnarchiveData = {
    requestBody?: {
        survey_result_ids: Array<(number)>;
    };
};

export type PutSurveyResultsBulkUnarchiveResponse = string;

export type PostSurveyResultsBySurveyResultIdUploadPresignedUrlResumeData = {
    requestBody?: {
        filename: string;
        mimetype: string;
    };
    surveyResultId: number;
};

export type PostSurveyResultsBySurveyResultIdUploadPresignedUrlResumeResponse = GetUploadPresignedUrlForResumeResponseDTO;

export type DeleteJobsCleanTestsResponse = string;

export type GetJobsSearchData = {
    archivedByUserId?: number;
    companyId?: number;
    createdByUserId?: number;
    endDate?: string;
    includeArchived?: 'true' | 'false';
    includeTests?: 'true' | 'false';
    jobId?: number;
    limit?: number;
    orderBy?: 'asc' | 'desc';
    page?: number;
    search?: string;
    sortBy?: 'id' | 'uuid' | 'created_at' | 'updated_at' | 'archived_at' | 'is_test' | 'title' | 'raw_description' | 'benchmark' | 'status' | 'delay_email_in_minutes' | 'ideal_candidate_description' | 'pipeline_id' | 'created_by_user_id' | 'updated_by_user_id' | 'archived_by_user_id' | 'company_id' | 'location_id' | 'department_id' | 'non_negotiables' | 'evaluation_criteria' | 'workflow_status' | 'is_published';
    sortByCompanyField?: 'id' | 'created_at' | 'updated_at' | 'archived_at' | 'name' | 'industry' | 'logo_file_path' | 'require_phone_number' | 'is_test' | 'active' | 'slug' | 'tier' | 'website_url' | 'website_about_us_url' | 'legacy_table_name' | 'is_default_company_for_legacy_table' | 'go_high_level_location_id' | 'parent_company_id' | 'legacy_table_id' | 'hubspot_company_id' | 'product_type' | 'no_statuses';
    sortByComputedField?: 'total_applications' | 'uploaded_resumes' | 'completed_assessments';
    sortByDepartmentField?: 'id' | 'created_at' | 'updated_at' | 'name' | 'company_id';
    sortByLocationField?: 'id' | 'created_at' | 'updated_at' | 'name' | 'company_id';
    startDate?: string;
    status?: 'ACTIVE' | 'INACTIVE';
    updatedByUserId?: number;
};

export type GetJobsSearchResponse = SearchJobsResponseDTO;

export type GetJobsPublicByJobUuidDetailsData = {
    jobUuid: string;
};

export type GetJobsPublicByJobUuidDetailsResponse = GetJobPublicResponseDTO;

export type GetJobsPublicData = {
    limit?: number;
    orderBy?: 'asc' | 'desc';
    page?: number;
    sortBy?: string;
    sortByLocationField?: string;
};

export type GetJobsPublicResponse = GetPublicJobsResponseDTO;

export type PostJobsData = {
    requestBody?: CreateJobRequestBodyDTO;
};

export type PostJobsResponse = CreateJobResponseDTO;

export type GetJobsData = {
    includeArchived?: 'true' | 'false';
    includeTests?: 'true' | 'false';
    limit?: number;
    orderBy?: 'asc' | 'desc';
    page?: number;
    sortBy?: string;
};

export type GetJobsResponse = GetJobsResponseDTO;

export type PostJobsByJobIdDuplicateData = {
    jobId: number;
};

export type PostJobsByJobIdDuplicateResponse = CreateJobResponseDTO;

export type GetJobsByJobIdData = {
    jobId: number;
};

export type GetJobsByJobIdResponse = GetJobResponseDTO;

export type PutJobsByJobIdData = {
    jobId: number;
    requestBody?: UpdateJobRequestBodyDTO;
};

export type PutJobsByJobIdResponse = UpdateJobResponseDTO;

export type DeleteJobsByJobIdData = {
    jobId: number;
};

export type DeleteJobsByJobIdResponse = DeleteJobResponseDTO;

export type DeleteJobsByJobIdArchiveData = {
    jobId: number;
};

export type DeleteJobsByJobIdArchiveResponse = ArchiveJobResponseDTO;

export type PostJobsPublicByJobUuidApplyData = {
    jobUuid: string;
    requestBody?: {
        first: string;
        last: string;
        email: string;
        phone: string | null;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
                value: string | number | boolean | Array<(string)> | unknown;
                is_passed?: boolean | null;
            }>;
        }>;
        opt_in_communications: boolean;
    };
};

export type PostJobsPublicByJobUuidApplyResponse = ApplyJobResponseDTO;

export type PostJobsByJobIdImportCandidatesUploadPresignedUrlData = {
    jobId: number;
    requestBody?: {
        filename: string;
        mimetype: string;
    };
};

export type PostJobsByJobIdImportCandidatesUploadPresignedUrlResponse = UploadPresignedUrlForImportCandidatesUploadPresignedUrlResponseDTO;

export type PutJobsByJobIdImportCandidatesStatusData = {
    jobId: number;
    requestBody?: {
        status: 'FILE_UPLOADING' | 'FILE_UPLOADED' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED';
    };
};

export type PutJobsByJobIdImportCandidatesStatusResponse = UpdateImportCandidatesStatusResponseDTO;

export type GetJobsByJobIdImportCandidatesStatusData = {
    jobId: number;
};

export type GetJobsByJobIdImportCandidatesStatusResponse = GetImportCandidatesStatusResponseDTO;

export type PostJobsByJobIdImportCandidatesConfirmData = {
    jobId: number;
    requestBody?: {
        import_checksum: string;
    };
};

export type PostJobsByJobIdImportCandidatesConfirmResponse = {
    job_id: number;
    import_checksum: string;
};

export type PostJobsGenerateData = {
    requestBody?: {
        title: string;
        benchmark: string;
        company_id: number;
    };
};

export type PostJobsGenerateResponse = {
    job_description: string;
    ideal_candidate_description: string;
    non_negotiables: string;
    trace_id: string;
    questions: Array<{
        label: string;
        type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
        required: boolean;
        options?: Array<(string)>;
    }>;
};

export type PostJobsAdsGenerateData = {
    requestBody?: {
        title: string;
        description: string;
        ideal_candidate_description: string;
        non_negotiables: string;
        platform?: 'INDEED' | 'LINKEDIN' | 'GLASSDOOR' | 'ZIPRECRUITER' | 'MONSTER' | 'CAREERBUILDER' | 'OTHER';
        company_id: number;
        role_benchmark?: string;
        location?: string;
        department?: string;
    };
};

export type PostJobsAdsGenerateResponse = {
    uuid: string;
    title: string;
    description: string;
    employment_type: string;
    location_type: string;
    city: string;
    region_code: string;
    country: string;
    postal_code: string;
    full_region_name: string;
    full_country_name: string;
    keyword_tags: Array<(string)>;
    benefits: Array<(string)>;
    salary_currency: string;
    salary_period: string;
    minimum_salary_minor: number;
    maximum_salary_minor?: number;
    trace_id: string;
};

export type DeleteJobApplicationTemplatesCleanTestsResponse = string;

export type PostJobApplicationTemplatesData = {
    requestBody?: {
        job_id: number;
        pages: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
        is_test?: boolean;
    };
};

export type PostJobApplicationTemplatesResponse = JobApplicationTemplate;

export type GetJobApplicationTemplatesData = {
    includeArchived?: 'true' | 'false';
    includeTests?: 'true' | 'false';
    limit?: number;
    orderBy?: 'asc' | 'desc';
    page?: number;
    sortBy?: string;
};

export type GetJobApplicationTemplatesResponse = {
    total_pages: number;
    current_page: number;
    next_page: number | null;
    previous_page: number | null;
    records: Array<JobApplicationTemplate>;
    total_records: number;
};

export type GetJobApplicationTemplatesByJobApplicationTemplateIdData = {
    jobApplicationTemplateId: number;
};

export type GetJobApplicationTemplatesByJobApplicationTemplateIdResponse = JobApplicationTemplate;

export type PutJobApplicationTemplatesByJobApplicationTemplateIdData = {
    jobApplicationTemplateId: number;
    requestBody?: {
        is_test?: boolean;
        pages?: Array<{
            questions: Array<{
                key: string;
                label: string;
                type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                required: boolean;
                options?: Array<(string | number)> | null;
                screeningCriteria?: 'Yes' | 'No' | string | Array<(string)> | {
    equalTo?: number;
    moreThan?: number;
    moreThanOrEqualTo?: number;
    lessThan?: number;
    lessThanOrEqualTo?: number;
    range?: Array<(number)>;
} | boolean | unknown;
            }>;
        }>;
    };
};

export type PutJobApplicationTemplatesByJobApplicationTemplateIdResponse = JobApplicationTemplate;

export type DeleteJobApplicationTemplatesByJobApplicationTemplateIdData = {
    jobApplicationTemplateId: number;
};

export type DeleteJobApplicationTemplatesByJobApplicationTemplateIdResponse = JobApplicationTemplate;

export type DeleteJobApplicationTemplatesByJobApplicationTemplateIdArchiveData = {
    jobApplicationTemplateId: number;
};

export type DeleteJobApplicationTemplatesByJobApplicationTemplateIdArchiveResponse = JobApplicationTemplate;

export type GetJobApplicationResponsesCandidateReferenceData = {
    candidateReference: string;
};

export type GetJobApplicationResponsesCandidateReferenceResponse = JobApplicationResponse;

export type PutJobApplicationResponsesCandidateReferenceData = {
    candidateReference: string;
    requestBody?: UpdateJobApplicationResponseRequestBodyDTO;
};

export type PutJobApplicationResponsesCandidateReferenceResponse = JobApplicationResponse;

export type GetJobApplicationResponsesData = {
    includeArchived?: 'true' | 'false';
    includeTests?: 'true' | 'false';
    limit?: number;
    orderBy?: 'asc' | 'desc';
    page?: number;
    sortBy?: string;
};

export type GetJobApplicationResponsesResponse = GetJobApplicationResponsesResponseDTO;

export type PutJobApplicationResponsesCandidateReferenceSubmitData = {
    candidateReference: string;
};

export type PutJobApplicationResponsesCandidateReferenceSubmitResponse = JobApplicationResponse;

export type PostJobApplicationResponsesCandidateReferenceUploadPresignedUrlResumeData = {
    candidateReference: string;
    requestBody?: {
        filename: string;
        mimetype: string;
    };
};

export type PostJobApplicationResponsesCandidateReferenceUploadPresignedUrlResumeResponse = GetUploadPresignedUrlForResumeResponseDTO;

export type GetPipelinesData = {
    companyId?: number | null;
};

export type GetPipelinesResponse = GetPipelinesResponseDTO;

export type PostPipelinesCreateDefaultData = {
    companyId?: number | null | Array<(number | null)> | unknown;
};

export type PostPipelinesCreateDefaultResponse = {
    success: boolean;
};

export type PostGhlWebhook907Bb31E4D534519BeddE4F1672023FfData = {
    requestBody?: {
    type: 'INSTALL';
    appId: string;
    installType: string;
    companyId: string;
    trial?: unknown;
} | {
    type: 'OpportunityStageUpdate' | 'OpportunityUpdate' | 'OpportunityCreate';
    appId: string;
    locationId: string;
    id: string;
    contactId: string;
    pipelineId: string;
    pipelineStageId: string;
} | {
    type: 'ContactCreate' | 'ContactUpdate';
    appId: string;
    locationId: string;
    id: string;
    tags: Array<(string)>;
    dateAdded: string;
} | {
    type: 'ContactDndUpdate';
    appId: string;
    locationId: string;
    id: string;
};
};

export type PostGhlWebhook907Bb31E4D534519BeddE4F1672023FfResponse = {
    result: string;
};

export type PostGhlForcePullDataData = {
    companyId?: number | null;
};

export type PostGhlForcePullDataResponse = unknown;

export type PostHubspotWebhooksCreateCompanyData = {
    requestBody?: Array<{
        appId: number;
        eventId: number;
        subscriptionId: number;
        portalId: number;
        occurredAt: number;
        subscriptionType: string;
        attemptNumber: number;
        objectId: number;
        changeSource: string;
        propertyName: string;
        propertyValue: string;
    }>;
};

export type PostHubspotWebhooksCreateCompanyResponse = {
    id: number;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    auth_role: 'COMPANY_OWNER' | 'COMPANY_USER' | 'SUPER_ADMIN' | 'FRANCHISE_OWNER' | 'FRANCHISE_USER';
    active: number;
    email: string;
    first: string;
    last: string;
    is_test: boolean;
    receives_email_on_assessment_completed: boolean;
    new_company_id: number | null;
    company_id: number | null;
    password_last_updated_at: string | null | string | unknown;
    hubspot_contact_id: string | null;
    company: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        name: string;
        industry: string;
        logo_file_path: string | null;
        require_phone_number: boolean;
        is_test: boolean;
        active: number;
        slug: string;
        tier: number;
        website_url: string | null;
        website_about_us_url: string | null;
        legacy_table_name: string | null;
        is_default_company_for_legacy_table: boolean;
        go_high_level_location_id: string | null;
        parent_company_id: number | null;
        legacy_table_id: number | null;
        hubspot_company_id: string | null;
        product_type: 'CORE' | 'FUNNEL' | 'GROWTH' | 'FREEZE' | 'CHURN' | null;
        no_statuses: boolean | null;
    };
    permissions: {
        can_view_hiring_pipeline: boolean;
        can_view_benchmark_scores: boolean;
        can_view_comparison_report: boolean;
        can_view_growth_report: boolean;
        can_view_coaching_report: boolean;
        can_view_conflict_tool: boolean;
        can_view_behavioral_questions_chart: boolean;
        can_view_changes_over_time_report: boolean;
        can_view_interview_questions: boolean;
        can_view_resume_analysis: boolean;
        can_view_ai_chat: boolean;
    };
} | unknown;

export type GetChatCandidateData = {
    surveyResultId: number;
};

export type GetChatCandidateResponse = {
    chat_uuid: string;
    title: string | null;
    messages: Array<{
        content: string;
        role: string;
        timestamp: string;
        trace_id?: string;
    }>;
};

export type PostChatFeedbackData = {
    requestBody?: {
        chatMessageUuid: string;
        feedbackMessage: string;
        correctness: 0 | 1;
    };
};

export type PostChatFeedbackResponse = {
    message: string;
    feedbackId: number;
};

export type PostChatSendData = {
    requestBody?: {
        prompt: string;
        candidate_id?: number;
        user_id?: number;
        company_id?: number;
        chat_history: Array<{
            text: string;
            role: 'user' | 'assistant';
            timestamp: string;
        }>;
        chat_uuid?: string;
    };
};

export type PostChatSendResponse = {
    message: string;
    message_uuid: string;
    chat_uuid: string;
    trace_id: string;
};

export type PostCandidatesResumeAnalysisFeedbackData = {
    requestBody?: {
        resumeAnalysisId: number;
        surveyResultId: number;
        traceId: string;
        feedbackMessage: string;
        correctness: 0 | 1;
    };
};

export type PostCandidatesResumeAnalysisFeedbackResponse = {
    message: string;
    feedbackId: number;
};

export type PostCandidatesScoringCalculateData = {
    requestBody?: {
        surveyResultId: number;
    };
};

export type PostCandidatesScoringCalculateResponse = {
    score: {
    behavioralScore: number;
    resumeScore: number;
    finalScore: number;
    role: string;
    createdAt: string;
    uuid: string;
} | unknown;
};

export type GetCandidatesScoringScoresData = {
    surveyResultId: number;
};

export type GetCandidatesScoringScoresResponse = {
    scores: Array<{
        behavioralScore: number;
        resumeScore: number;
        finalScore: number;
        role: string;
        createdAt: string;
        uuid: string;
    }>;
};

export type GetTraitScaleMappingsReportsSearchData = {
    includeArchived?: 'true' | 'false';
    includeTests?: 'true' | 'false';
    isActive?: 'true' | 'false';
    limit?: number;
    orderBy?: 'asc' | 'desc';
    page?: number;
    search?: string;
    sortBy?: 'id' | 'uuid' | 'created_at' | 'updated_at' | 'archived_at' | 'is_test' | 'name' | 'description' | 'strong_weight' | 'moderate_weight' | 'is_active' | 'thresholds' | 'sections';
    uuid?: string;
};

export type GetTraitScaleMappingsReportsSearchResponse = {
    total_pages: number;
    current_page: number;
    next_page: number | null;
    previous_page: number | null;
    records: Array<{
        id: number;
        uuid: string;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        is_test: boolean;
        name: string;
        description: string | null;
        strong_weight: number | null;
        moderate_weight: number | null;
        is_active: boolean;
    }>;
    total_records: number;
};

export type PostTraitScaleMappingsReportsData = {
    requestBody?: {
        is_test?: boolean;
        name: string;
        description?: string | null;
        strong_weight: number | null;
        moderate_weight: number | null;
        is_active?: boolean;
        thresholds: Array<unknown>;
        sections: Array<unknown>;
    };
};

export type PostTraitScaleMappingsReportsResponse = TraitScaleMappingReport;

export type GetTraitScaleMappingsReportsByIdData = {
    id: number;
};

export type GetTraitScaleMappingsReportsByIdResponse = TraitScaleMappingReport;

export type PutTraitScaleMappingsReportsByIdData = {
    id: number;
    requestBody?: {
        archived_at?: string | null | string | unknown;
        is_test?: boolean;
        name?: string;
        description?: string | null;
        strong_weight?: number | null;
        moderate_weight?: number | null;
        is_active?: boolean;
        thresholds?: Array<unknown>;
        sections?: Array<unknown>;
    };
};

export type PutTraitScaleMappingsReportsByIdResponse = TraitScaleMappingReport;

export type $OpenApiTs = {
    '/survey-results/track-event': {
        post: {
            req: PostSurveyResultsTrackEventData;
            res: {
                /**
                 * Event tracked successfully
                 */
                200: {
                    message: string;
                };
            };
        };
    };
    '/survey-results/bulk-archive': {
        delete: {
            req: DeleteSurveyResultsBulkArchiveData;
            res: {
                /**
                 * Survey results archived successfully
                 */
                200: string;
            };
        };
    };
    '/survey-results/bulk-unarchive': {
        put: {
            req: PutSurveyResultsBulkUnarchiveData;
            res: {
                /**
                 * Survey results unarchived successfully
                 */
                200: string;
            };
        };
    };
    '/survey-results/{survey_result_id}/upload-presigned-url/resume': {
        post: {
            req: PostSurveyResultsBySurveyResultIdUploadPresignedUrlResumeData;
            res: {
                /**
                 * Upload presigned url retrieved successfully
                 */
                200: GetUploadPresignedUrlForResumeResponseDTO;
            };
        };
    };
    '/jobs/clean-tests': {
        delete: {
            res: {
                /**
                 * Test jobs cleaned successfully
                 */
                200: string;
            };
        };
    };
    '/jobs/search': {
        get: {
            req: GetJobsSearchData;
            res: {
                /**
                 * Jobs retrieved successfully
                 */
                200: SearchJobsResponseDTO;
            };
        };
    };
    '/jobs/public/{job_uuid}/details': {
        get: {
            req: GetJobsPublicByJobUuidDetailsData;
            res: {
                /**
                 * Job public retrieved successfully
                 */
                200: GetJobPublicResponseDTO;
            };
        };
    };
    '/jobs/public': {
        get: {
            req: GetJobsPublicData;
            res: {
                /**
                 * Jobs retrieved successfully
                 */
                200: GetPublicJobsResponseDTO;
            };
        };
    };
    '/jobs': {
        post: {
            req: PostJobsData;
            res: {
                /**
                 * Job created successfully
                 */
                201: CreateJobResponseDTO;
            };
        };
        get: {
            req: GetJobsData;
            res: {
                /**
                 * Jobs retrieved successfully
                 */
                200: GetJobsResponseDTO;
            };
        };
    };
    '/jobs/{job_id}/duplicate': {
        post: {
            req: PostJobsByJobIdDuplicateData;
            res: {
                /**
                 * Job duplicated successfully
                 */
                201: CreateJobResponseDTO;
            };
        };
    };
    '/jobs/{job_id}': {
        get: {
            req: GetJobsByJobIdData;
            res: {
                /**
                 * Job retrieved successfully
                 */
                200: GetJobResponseDTO;
            };
        };
        put: {
            req: PutJobsByJobIdData;
            res: {
                /**
                 * Job updated successfully
                 */
                200: UpdateJobResponseDTO;
            };
        };
        delete: {
            req: DeleteJobsByJobIdData;
            res: {
                /**
                 * Job deleted successfully
                 */
                200: DeleteJobResponseDTO;
            };
        };
    };
    '/jobs/{job_id}/archive': {
        delete: {
            req: DeleteJobsByJobIdArchiveData;
            res: {
                /**
                 * Job archived successfully
                 */
                200: ArchiveJobResponseDTO;
            };
        };
    };
    '/jobs/public/{job_uuid}/apply': {
        post: {
            req: PostJobsPublicByJobUuidApplyData;
            res: {
                /**
                 * Job applied successfully
                 */
                201: ApplyJobResponseDTO;
            };
        };
    };
    '/jobs/{job_id}/import-candidates/upload-presigned-url': {
        post: {
            req: PostJobsByJobIdImportCandidatesUploadPresignedUrlData;
            res: {
                /**
                 * Upload presigned url retrieved successfully
                 */
                200: UploadPresignedUrlForImportCandidatesUploadPresignedUrlResponseDTO;
            };
        };
    };
    '/jobs/{job_id}/import-candidates/status': {
        put: {
            req: PutJobsByJobIdImportCandidatesStatusData;
            res: {
                /**
                 * Update import candidates status successfully
                 */
                200: UpdateImportCandidatesStatusResponseDTO;
            };
        };
        get: {
            req: GetJobsByJobIdImportCandidatesStatusData;
            res: {
                /**
                 * Get import candidates status successfully
                 */
                200: GetImportCandidatesStatusResponseDTO;
            };
        };
    };
    '/jobs/{job_id}/import-candidates/confirm': {
        post: {
            req: PostJobsByJobIdImportCandidatesConfirmData;
            res: {
                /**
                 * Confirm import candidates successfully
                 */
                200: {
                    job_id: number;
                    import_checksum: string;
                };
            };
        };
    };
    '/jobs/generate': {
        post: {
            req: PostJobsGenerateData;
            res: {
                /**
                 * Job generated successfully
                 */
                200: {
                    job_description: string;
                    ideal_candidate_description: string;
                    non_negotiables: string;
                    trace_id: string;
                    questions: Array<{
                        label: string;
                        type: 'SHORT_TEXT' | 'LONG_TEXT' | 'MULTIPLE_CHOICE' | 'SINGLE_CHOICE' | 'YES_NO' | 'FILE_UPLOAD' | 'NUMBER' | 'CHECKBOX';
                        required: boolean;
                        options?: Array<(string)>;
                    }>;
                };
            };
        };
    };
    '/jobs/ads/generate': {
        post: {
            req: PostJobsAdsGenerateData;
            res: {
                /**
                 * Job ad generated successfully
                 */
                200: {
                    uuid: string;
                    title: string;
                    description: string;
                    employment_type: string;
                    location_type: string;
                    city: string;
                    region_code: string;
                    country: string;
                    postal_code: string;
                    full_region_name: string;
                    full_country_name: string;
                    keyword_tags: Array<(string)>;
                    benefits: Array<(string)>;
                    salary_currency: string;
                    salary_period: string;
                    minimum_salary_minor: number;
                    maximum_salary_minor?: number;
                    trace_id: string;
                };
            };
        };
    };
    '/job-application-templates/clean-tests': {
        delete: {
            res: {
                /**
                 * Test jobs cleaned successfully
                 */
                200: string;
            };
        };
    };
    '/job-application-templates': {
        post: {
            req: PostJobApplicationTemplatesData;
            res: {
                /**
                 * Job application template created successfully
                 */
                201: JobApplicationTemplate;
            };
        };
        get: {
            req: GetJobApplicationTemplatesData;
            res: {
                /**
                 * Job application templates retrieved successfully
                 */
                200: {
                    total_pages: number;
                    current_page: number;
                    next_page: number | null;
                    previous_page: number | null;
                    records: Array<JobApplicationTemplate>;
                    total_records: number;
                };
            };
        };
    };
    '/job-application-templates/{job_application_template_id}': {
        get: {
            req: GetJobApplicationTemplatesByJobApplicationTemplateIdData;
            res: {
                /**
                 * Job application template retrieved successfully
                 */
                200: JobApplicationTemplate;
            };
        };
        put: {
            req: PutJobApplicationTemplatesByJobApplicationTemplateIdData;
            res: {
                /**
                 * Job application template updated successfully
                 */
                200: JobApplicationTemplate;
            };
        };
        delete: {
            req: DeleteJobApplicationTemplatesByJobApplicationTemplateIdData;
            res: {
                /**
                 * Job application template deleted successfully
                 */
                200: JobApplicationTemplate;
            };
        };
    };
    '/job-application-templates/{job_application_template_id}/archive': {
        delete: {
            req: DeleteJobApplicationTemplatesByJobApplicationTemplateIdArchiveData;
            res: {
                /**
                 * Job archived successfully
                 */
                200: JobApplicationTemplate;
            };
        };
    };
    '/job-application-responses/candidate-reference': {
        get: {
            req: GetJobApplicationResponsesCandidateReferenceData;
            res: {
                /**
                 * Job application response retrieved successfully
                 */
                200: JobApplicationResponse;
            };
        };
        put: {
            req: PutJobApplicationResponsesCandidateReferenceData;
            res: {
                /**
                 * Job application response updated successfully
                 */
                200: JobApplicationResponse;
            };
        };
    };
    '/job-application-responses': {
        get: {
            req: GetJobApplicationResponsesData;
            res: {
                /**
                 * Job application responses retrieved successfully
                 */
                200: GetJobApplicationResponsesResponseDTO;
            };
        };
    };
    '/job-application-responses/candidate-reference/submit': {
        put: {
            req: PutJobApplicationResponsesCandidateReferenceSubmitData;
            res: {
                /**
                 * Job application response submitted successfully
                 */
                200: JobApplicationResponse;
            };
        };
    };
    '/job-application-responses/candidate-reference/upload-presigned-url/resume': {
        post: {
            req: PostJobApplicationResponsesCandidateReferenceUploadPresignedUrlResumeData;
            res: {
                /**
                 * Upload presigned url retrieved successfully
                 */
                200: GetUploadPresignedUrlForResumeResponseDTO;
            };
        };
    };
    '/pipelines': {
        get: {
            req: GetPipelinesData;
            res: {
                /**
                 * Pipelines retrieved successfully
                 */
                200: GetPipelinesResponseDTO;
            };
        };
    };
    '/pipelines/create-default': {
        post: {
            req: PostPipelinesCreateDefaultData;
            res: {
                /**
                 * Pipelines created successfully
                 */
                200: {
                    success: boolean;
                };
            };
        };
    };
    '/ghl/webhook/907bb31e-4d53-4519-bedd-e4f1672023ff': {
        post: {
            req: PostGhlWebhook907Bb31E4D534519BeddE4F1672023FfData;
            res: {
                /**
                 * GHL Webhook Received
                 */
                200: {
                    result: string;
                };
                /**
                 * Bad Request - Unhandled webhook type
                 */
                400: {
                    result: string;
                };
                /**
                 * Internal Server Error
                 */
                500: {
                    result: string;
                };
            };
        };
    };
    '/ghl/force-pull-data': {
        post: {
            req: PostGhlForcePullDataData;
            res: {
                /**
                 * Data pulled successfully
                 */
                200: unknown;
            };
        };
    };
    '/hubspot/webhooks/create-company': {
        post: {
            req: PostHubspotWebhooksCreateCompanyData;
            res: {
                /**
                 * Company created successfully
                 */
                201: {
    id: number;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    auth_role: 'COMPANY_OWNER' | 'COMPANY_USER' | 'SUPER_ADMIN' | 'FRANCHISE_OWNER' | 'FRANCHISE_USER';
    active: number;
    email: string;
    first: string;
    last: string;
    is_test: boolean;
    receives_email_on_assessment_completed: boolean;
    new_company_id: number | null;
    company_id: number | null;
    password_last_updated_at: string | null | string | unknown;
    hubspot_contact_id: string | null;
    company: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        name: string;
        industry: string;
        logo_file_path: string | null;
        require_phone_number: boolean;
        is_test: boolean;
        active: number;
        slug: string;
        tier: number;
        website_url: string | null;
        website_about_us_url: string | null;
        legacy_table_name: string | null;
        is_default_company_for_legacy_table: boolean;
        go_high_level_location_id: string | null;
        parent_company_id: number | null;
        legacy_table_id: number | null;
        hubspot_company_id: string | null;
        product_type: 'CORE' | 'FUNNEL' | 'GROWTH' | 'FREEZE' | 'CHURN' | null;
        no_statuses: boolean | null;
    };
    permissions: {
        can_view_hiring_pipeline: boolean;
        can_view_benchmark_scores: boolean;
        can_view_comparison_report: boolean;
        can_view_growth_report: boolean;
        can_view_coaching_report: boolean;
        can_view_conflict_tool: boolean;
        can_view_behavioral_questions_chart: boolean;
        can_view_changes_over_time_report: boolean;
        can_view_interview_questions: boolean;
        can_view_resume_analysis: boolean;
        can_view_ai_chat: boolean;
    };
} | unknown;
                /**
                 * Bad Request
                 */
                400: {
    id: number;
    created_at: string | null | string | unknown;
    updated_at: string | null | string | unknown;
    archived_at: string | null | string | unknown;
    auth_role: 'COMPANY_OWNER' | 'COMPANY_USER' | 'SUPER_ADMIN' | 'FRANCHISE_OWNER' | 'FRANCHISE_USER';
    active: number;
    email: string;
    first: string;
    last: string;
    is_test: boolean;
    receives_email_on_assessment_completed: boolean;
    new_company_id: number | null;
    company_id: number | null;
    password_last_updated_at: string | null | string | unknown;
    hubspot_contact_id: string | null;
    company: {
        id: number;
        created_at: string | null | string | unknown;
        updated_at: string | null | string | unknown;
        archived_at: string | null | string | unknown;
        name: string;
        industry: string;
        logo_file_path: string | null;
        require_phone_number: boolean;
        is_test: boolean;
        active: number;
        slug: string;
        tier: number;
        website_url: string | null;
        website_about_us_url: string | null;
        legacy_table_name: string | null;
        is_default_company_for_legacy_table: boolean;
        go_high_level_location_id: string | null;
        parent_company_id: number | null;
        legacy_table_id: number | null;
        hubspot_company_id: string | null;
        product_type: 'CORE' | 'FUNNEL' | 'GROWTH' | 'FREEZE' | 'CHURN' | null;
        no_statuses: boolean | null;
    };
    permissions: {
        can_view_hiring_pipeline: boolean;
        can_view_benchmark_scores: boolean;
        can_view_comparison_report: boolean;
        can_view_growth_report: boolean;
        can_view_coaching_report: boolean;
        can_view_conflict_tool: boolean;
        can_view_behavioral_questions_chart: boolean;
        can_view_changes_over_time_report: boolean;
        can_view_interview_questions: boolean;
        can_view_resume_analysis: boolean;
        can_view_ai_chat: boolean;
    };
} | unknown;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/chat/candidate': {
        get: {
            req: GetChatCandidateData;
            res: {
                /**
                 * Chat history retrieved successfully
                 */
                200: {
                    chat_uuid: string;
                    title: string | null;
                    messages: Array<{
                        content: string;
                        role: string;
                        timestamp: string;
                        trace_id?: string;
                    }>;
                };
                /**
                 * Chat not found
                 */
                404: unknown;
            };
        };
    };
    '/chat/feedback': {
        post: {
            req: PostChatFeedbackData;
            res: {
                /**
                 * Feedback saved successfully
                 */
                200: {
                    message: string;
                    feedbackId: number;
                };
            };
        };
    };
    '/chat/send': {
        post: {
            req: PostChatSendData;
            res: {
                /**
                 * Chat message sent successfully
                 */
                200: {
                    message: string;
                    message_uuid: string;
                    chat_uuid: string;
                    trace_id: string;
                };
            };
        };
    };
    '/candidates/resume-analysis/feedback': {
        post: {
            req: PostCandidatesResumeAnalysisFeedbackData;
            res: {
                /**
                 * Feedback saved successfully
                 */
                200: {
                    message: string;
                    feedbackId: number;
                };
            };
        };
    };
    '/candidates/scoring/calculate': {
        post: {
            req: PostCandidatesScoringCalculateData;
            res: {
                /**
                 * Score calculated successfully
                 */
                200: {
                    score: {
    behavioralScore: number;
    resumeScore: number;
    finalScore: number;
    role: string;
    createdAt: string;
    uuid: string;
} | unknown;
                };
            };
        };
    };
    '/candidates/scoring/scores': {
        get: {
            req: GetCandidatesScoringScoresData;
            res: {
                /**
                 * Scores retrieved successfully
                 */
                200: {
                    scores: Array<{
                        behavioralScore: number;
                        resumeScore: number;
                        finalScore: number;
                        role: string;
                        createdAt: string;
                        uuid: string;
                    }>;
                };
            };
        };
    };
    '/trait-scale-mappings/reports/search': {
        get: {
            req: GetTraitScaleMappingsReportsSearchData;
            res: {
                /**
                 * Successfully retrieved trait scale mapping reports
                 */
                200: {
                    total_pages: number;
                    current_page: number;
                    next_page: number | null;
                    previous_page: number | null;
                    records: Array<{
                        id: number;
                        uuid: string;
                        created_at: string | null | string | unknown;
                        updated_at: string | null | string | unknown;
                        archived_at: string | null | string | unknown;
                        is_test: boolean;
                        name: string;
                        description: string | null;
                        strong_weight: number | null;
                        moderate_weight: number | null;
                        is_active: boolean;
                    }>;
                    total_records: number;
                };
            };
        };
    };
    '/trait-scale-mappings/reports': {
        post: {
            req: PostTraitScaleMappingsReportsData;
            res: {
                /**
                 * Successfully created the trait scale mapping report
                 */
                201: TraitScaleMappingReport;
            };
        };
    };
    '/trait-scale-mappings/reports/{id}': {
        get: {
            req: GetTraitScaleMappingsReportsByIdData;
            res: {
                /**
                 * Successfully retrieved the trait scale mapping report
                 */
                200: TraitScaleMappingReport;
            };
        };
        put: {
            req: PutTraitScaleMappingsReportsByIdData;
            res: {
                /**
                 * Successfully updated the trait scale mapping report
                 */
                200: TraitScaleMappingReport;
            };
        };
    };
};