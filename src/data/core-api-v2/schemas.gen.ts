// This file is auto-generated by @hey-api/openapi-ts

export const $GetUploadPresignedUrlForResumeResponseDTO = {
  type: 'object',
  properties: {
    survey_result_id: {
      type: 'number',
    },
    file_path: {
      type: 'string',
    },
    file_name: {
      type: 'string',
    },
    file_mime_type: {
      type: 'string',
      nullable: true,
    },
    presigned_url: {
      type: 'string',
    },
  },
  required: ['survey_result_id', 'file_path', 'file_name', 'file_mime_type', 'presigned_url'],
} as const;

export const $SearchJob = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    total_applications: {
      type: 'number',
    },
    uploaded_resumes: {
      type: 'number',
    },
    completed_assessments: {
      type: 'number',
    },
    created_by_user: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        first: {
          type: 'string',
        },
        last: {
          type: 'string',
        },
        email: {
          type: 'string',
        },
        auth_role: {
          type: 'string',
          enum: [
            'COMPANY_OWNER',
            'COMPANY_USER',
            'SUPER_ADMIN',
            'FRANCHISE_OWNER',
            'FRANCHISE_USER',
          ],
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'first',
        'last',
        'email',
        'auth_role',
      ],
    },
    updated_by_user: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        first: {
          type: 'string',
        },
        last: {
          type: 'string',
        },
        email: {
          type: 'string',
        },
        auth_role: {
          type: 'string',
          enum: [
            'COMPANY_OWNER',
            'COMPANY_USER',
            'SUPER_ADMIN',
            'FRANCHISE_OWNER',
            'FRANCHISE_USER',
          ],
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'first',
        'last',
        'email',
        'auth_role',
      ],
    },
    archived_by_user: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        first: {
          type: 'string',
        },
        last: {
          type: 'string',
        },
        email: {
          type: 'string',
        },
        auth_role: {
          type: 'string',
          enum: [
            'COMPANY_OWNER',
            'COMPANY_USER',
            'SUPER_ADMIN',
            'FRANCHISE_OWNER',
            'FRANCHISE_USER',
          ],
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'first',
        'last',
        'email',
        'auth_role',
      ],
    },
    company: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        slug: {
          type: 'string',
        },
      },
      required: ['id', 'created_at', 'updated_at', 'archived_at', 'name', 'slug'],
    },
    location: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    department: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    job_application_template: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        pages: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              questions: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    key: {
                      type: 'string',
                      minLength: 1,
                    },
                    label: {
                      type: 'string',
                      minLength: 1,
                    },
                    type: {
                      type: 'string',
                      enum: [
                        'SHORT_TEXT',
                        'LONG_TEXT',
                        'MULTIPLE_CHOICE',
                        'SINGLE_CHOICE',
                        'YES_NO',
                        'FILE_UPLOAD',
                        'NUMBER',
                        'CHECKBOX',
                      ],
                    },
                    required: {
                      type: 'boolean',
                    },
                    options: {
                      type: 'array',
                      nullable: true,
                      items: {
                        anyOf: [
                          {
                            type: 'string',
                          },
                          {
                            type: 'number',
                          },
                        ],
                      },
                    },
                    screeningCriteria: {
                      anyOf: [
                        {
                          type: 'string',
                          enum: ['Yes', 'No'],
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          type: 'object',
                          properties: {
                            equalTo: {
                              type: 'number',
                            },
                            moreThan: {
                              type: 'number',
                            },
                            moreThanOrEqualTo: {
                              type: 'number',
                            },
                            lessThan: {
                              type: 'number',
                            },
                            lessThanOrEqualTo: {
                              type: 'number',
                            },
                            range: {
                              type: 'array',
                              items: {
                                type: 'number',
                              },
                            },
                          },
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                  },
                  required: ['key', 'label', 'type', 'required'],
                },
              },
            },
            required: ['questions'],
          },
        },
      },
      required: ['id', 'created_at', 'updated_at', 'pages'],
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'delay_email_in_minutes',
    'pipeline_id',
    'total_applications',
    'uploaded_resumes',
    'completed_assessments',
    'created_by_user',
    'updated_by_user',
    'archived_by_user',
    'company',
    'location',
    'department',
    'job_application_template',
  ],
} as const;

export const $SearchJobsResponseDTO = {
  type: 'object',
  properties: {
    total_pages: {
      type: 'number',
    },
    current_page: {
      type: 'number',
    },
    next_page: {
      type: 'number',
      nullable: true,
    },
    previous_page: {
      type: 'number',
      nullable: true,
    },
    records: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/SearchJob',
      },
    },
    total_records: {
      type: 'number',
    },
  },
  required: [
    'total_pages',
    'current_page',
    'next_page',
    'previous_page',
    'records',
    'total_records',
  ],
} as const;

export const $GetJobPublicResponseDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_by_user_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    updated_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    archived_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    company: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        slug: {
          type: 'string',
        },
        logo_file_path: {
          type: 'string',
          nullable: true,
        },
        s3_logo_link: {
          type: 'string',
          nullable: true,
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'name',
        'slug',
        'logo_file_path',
        's3_logo_link',
      ],
    },
    location: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    department: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    job_application_template: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        pages: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              questions: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    key: {
                      type: 'string',
                      minLength: 1,
                    },
                    label: {
                      type: 'string',
                      minLength: 1,
                    },
                    type: {
                      type: 'string',
                      enum: [
                        'SHORT_TEXT',
                        'LONG_TEXT',
                        'MULTIPLE_CHOICE',
                        'SINGLE_CHOICE',
                        'YES_NO',
                        'FILE_UPLOAD',
                        'NUMBER',
                        'CHECKBOX',
                      ],
                    },
                    required: {
                      type: 'boolean',
                    },
                    options: {
                      type: 'array',
                      nullable: true,
                      items: {
                        anyOf: [
                          {
                            type: 'string',
                          },
                          {
                            type: 'number',
                          },
                        ],
                      },
                    },
                    screeningCriteria: {
                      anyOf: [
                        {
                          type: 'string',
                          enum: ['Yes', 'No'],
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          type: 'object',
                          properties: {
                            equalTo: {
                              type: 'number',
                            },
                            moreThan: {
                              type: 'number',
                            },
                            moreThanOrEqualTo: {
                              type: 'number',
                            },
                            lessThan: {
                              type: 'number',
                            },
                            lessThanOrEqualTo: {
                              type: 'number',
                            },
                            range: {
                              type: 'array',
                              items: {
                                type: 'number',
                              },
                            },
                          },
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                  },
                  required: ['key', 'label', 'type', 'required'],
                },
              },
            },
            required: ['questions'],
          },
        },
      },
      required: ['id', 'created_at', 'updated_at', 'archived_at', 'pages'],
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'delay_email_in_minutes',
    'ideal_candidate_description',
    'pipeline_id',
    'created_by_user_id',
    'updated_by_user_id',
    'archived_by_user_id',
    'company',
    'location',
    'department',
    'job_application_template',
  ],
} as const;

export const $GetPublicJobsResponseDTO = {
  type: 'object',
  properties: {
    total_pages: {
      type: 'number',
    },
    current_page: {
      type: 'number',
    },
    next_page: {
      type: 'number',
      nullable: true,
    },
    previous_page: {
      type: 'number',
      nullable: true,
    },
    records: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'integer',
            minimum: 0,
            exclusiveMinimum: true,
          },
          uuid: {
            type: 'string',
            format: 'uuid',
          },
          created_at: {
            anyOf: [
              {
                type: 'string',
                nullable: true,
              },
              {
                type: 'string',
              },
              {
                nullable: true,
              },
            ],
          },
          updated_at: {
            anyOf: [
              {
                type: 'string',
                nullable: true,
              },
              {
                type: 'string',
              },
              {
                nullable: true,
              },
            ],
          },
          archived_at: {
            anyOf: [
              {
                type: 'string',
                nullable: true,
              },
              {
                type: 'string',
              },
              {
                nullable: true,
              },
            ],
          },
          is_test: {
            type: 'boolean',
          },
          title: {
            type: 'string',
            minLength: 1,
          },
          raw_description: {
            type: 'string',
            nullable: true,
            maxLength: 10000,
          },
          benchmark: {
            type: 'string',
            nullable: true,
          },
          status: {
            type: 'string',
            enum: ['ACTIVE', 'INACTIVE'],
          },
          delay_email_in_minutes: {
            type: 'integer',
            nullable: true,
            minimum: 0,
            exclusiveMinimum: true,
          },
          ideal_candidate_description: {
            type: 'string',
            nullable: true,
            maxLength: 10000,
          },
          pipeline_id: {
            type: 'integer',
            minimum: 0,
            exclusiveMinimum: true,
          },
          created_by_user_id: {
            type: 'integer',
            minimum: 0,
            exclusiveMinimum: true,
          },
          updated_by_user_id: {
            type: 'integer',
            nullable: true,
            minimum: 0,
            exclusiveMinimum: true,
          },
          archived_by_user_id: {
            type: 'integer',
            nullable: true,
            minimum: 0,
            exclusiveMinimum: true,
          },
          company: {
            type: 'object',
            properties: {
              id: {
                type: 'integer',
                minimum: 0,
                exclusiveMinimum: true,
              },
              created_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              updated_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              archived_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              name: {
                type: 'string',
              },
              slug: {
                type: 'string',
              },
              logo_file_path: {
                type: 'string',
                nullable: true,
              },
              s3_logo_link: {
                type: 'string',
                nullable: true,
              },
            },
            required: [
              'id',
              'created_at',
              'updated_at',
              'archived_at',
              'name',
              'slug',
              'logo_file_path',
              's3_logo_link',
            ],
          },
          location: {
            type: 'object',
            nullable: true,
            properties: {
              id: {
                type: 'integer',
                minimum: 0,
                exclusiveMinimum: true,
              },
              created_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              updated_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              name: {
                type: 'string',
              },
              company_id: {
                type: 'integer',
                nullable: true,
                minimum: 0,
                exclusiveMinimum: true,
              },
            },
            required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
          },
          department: {
            type: 'object',
            nullable: true,
            properties: {
              id: {
                type: 'integer',
                minimum: 0,
                exclusiveMinimum: true,
              },
              created_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              updated_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              name: {
                type: 'string',
              },
              company_id: {
                type: 'integer',
                nullable: true,
                minimum: 0,
                exclusiveMinimum: true,
              },
            },
            required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
          },
          job_application_template: {
            type: 'object',
            properties: {
              id: {
                type: 'integer',
                minimum: 0,
                exclusiveMinimum: true,
              },
              created_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              updated_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              archived_at: {
                anyOf: [
                  {
                    type: 'string',
                    nullable: true,
                  },
                  {
                    type: 'string',
                  },
                  {
                    nullable: true,
                  },
                ],
              },
              pages: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    questions: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          key: {
                            type: 'string',
                            minLength: 1,
                          },
                          label: {
                            type: 'string',
                            minLength: 1,
                          },
                          type: {
                            type: 'string',
                            enum: [
                              'SHORT_TEXT',
                              'LONG_TEXT',
                              'MULTIPLE_CHOICE',
                              'SINGLE_CHOICE',
                              'YES_NO',
                              'FILE_UPLOAD',
                              'NUMBER',
                              'CHECKBOX',
                            ],
                          },
                          required: {
                            type: 'boolean',
                          },
                          options: {
                            type: 'array',
                            nullable: true,
                            items: {
                              anyOf: [
                                {
                                  type: 'string',
                                },
                                {
                                  type: 'number',
                                },
                              ],
                            },
                          },
                          screeningCriteria: {
                            anyOf: [
                              {
                                type: 'string',
                                enum: ['Yes', 'No'],
                              },
                              {
                                type: 'string',
                              },
                              {
                                type: 'array',
                                items: {
                                  type: 'string',
                                },
                              },
                              {
                                type: 'object',
                                properties: {
                                  equalTo: {
                                    type: 'number',
                                  },
                                  moreThan: {
                                    type: 'number',
                                  },
                                  moreThanOrEqualTo: {
                                    type: 'number',
                                  },
                                  lessThan: {
                                    type: 'number',
                                  },
                                  lessThanOrEqualTo: {
                                    type: 'number',
                                  },
                                  range: {
                                    type: 'array',
                                    items: {
                                      type: 'number',
                                    },
                                  },
                                },
                              },
                              {
                                type: 'boolean',
                              },
                              {
                                nullable: true,
                              },
                            ],
                          },
                        },
                        required: ['key', 'label', 'type', 'required'],
                      },
                    },
                  },
                  required: ['questions'],
                },
              },
            },
            required: ['id', 'created_at', 'updated_at', 'archived_at', 'pages'],
          },
        },
        required: [
          'id',
          'uuid',
          'created_at',
          'updated_at',
          'archived_at',
          'is_test',
          'title',
          'raw_description',
          'benchmark',
          'status',
          'delay_email_in_minutes',
          'ideal_candidate_description',
          'pipeline_id',
          'created_by_user_id',
          'updated_by_user_id',
          'archived_by_user_id',
          'company',
          'location',
          'department',
          'job_application_template',
        ],
      },
    },
    total_records: {
      type: 'number',
    },
  },
  required: [
    'total_pages',
    'current_page',
    'next_page',
    'previous_page',
    'records',
    'total_records',
  ],
} as const;

export const $CreateJobResponseDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_by_user_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    updated_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    archived_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    company_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    location_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    department_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    non_negotiables: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    evaluation_criteria: {
      type: 'object',
      nullable: true,
      properties: {
        education: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        certifications: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        total_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        relevant_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        skills: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        previous_roles: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
      },
      required: [
        'education',
        'certifications',
        'total_experience',
        'relevant_experience',
        'skills',
        'previous_roles',
      ],
    },
    job_application_template: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        is_test: {
          type: 'boolean',
        },
        pages: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              questions: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    key: {
                      type: 'string',
                      minLength: 1,
                    },
                    label: {
                      type: 'string',
                      minLength: 1,
                    },
                    type: {
                      type: 'string',
                      enum: [
                        'SHORT_TEXT',
                        'LONG_TEXT',
                        'MULTIPLE_CHOICE',
                        'SINGLE_CHOICE',
                        'YES_NO',
                        'FILE_UPLOAD',
                        'NUMBER',
                        'CHECKBOX',
                      ],
                    },
                    required: {
                      type: 'boolean',
                    },
                    options: {
                      type: 'array',
                      nullable: true,
                      items: {
                        anyOf: [
                          {
                            type: 'string',
                          },
                          {
                            type: 'number',
                          },
                        ],
                      },
                    },
                    screeningCriteria: {
                      anyOf: [
                        {
                          type: 'string',
                          enum: ['Yes', 'No'],
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          type: 'object',
                          properties: {
                            equalTo: {
                              type: 'number',
                            },
                            moreThan: {
                              type: 'number',
                            },
                            moreThanOrEqualTo: {
                              type: 'number',
                            },
                            lessThan: {
                              type: 'number',
                            },
                            lessThanOrEqualTo: {
                              type: 'number',
                            },
                            range: {
                              type: 'array',
                              items: {
                                type: 'number',
                              },
                            },
                          },
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                  },
                  required: ['key', 'label', 'type', 'required'],
                },
              },
            },
            required: ['questions'],
          },
        },
        created_by_user_id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        updated_by_user_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        archived_by_user_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        job_id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'is_test',
        'pages',
        'created_by_user_id',
        'updated_by_user_id',
        'archived_by_user_id',
        'job_id',
      ],
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'delay_email_in_minutes',
    'ideal_candidate_description',
    'pipeline_id',
    'created_by_user_id',
    'updated_by_user_id',
    'archived_by_user_id',
    'company_id',
    'location_id',
    'department_id',
    'non_negotiables',
    'evaluation_criteria',
    'job_application_template',
  ],
} as const;

export const $CreateJobRequestBodyDTO = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      minLength: 1,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    company_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    is_test: {
      type: 'boolean',
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    non_negotiables: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    evaluation_criteria: {
      type: 'object',
      nullable: true,
      properties: {
        education: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        certifications: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        total_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        relevant_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        skills: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        previous_roles: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
      },
      required: [
        'education',
        'certifications',
        'total_experience',
        'relevant_experience',
        'skills',
        'previous_roles',
      ],
    },
    department_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    location_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    pages: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          questions: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                key: {
                  type: 'string',
                  minLength: 1,
                },
                label: {
                  type: 'string',
                  minLength: 1,
                },
                type: {
                  type: 'string',
                  enum: [
                    'SHORT_TEXT',
                    'LONG_TEXT',
                    'MULTIPLE_CHOICE',
                    'SINGLE_CHOICE',
                    'YES_NO',
                    'FILE_UPLOAD',
                    'NUMBER',
                    'CHECKBOX',
                  ],
                },
                required: {
                  type: 'boolean',
                },
                options: {
                  type: 'array',
                  nullable: true,
                  items: {
                    anyOf: [
                      {
                        type: 'string',
                      },
                      {
                        type: 'number',
                      },
                    ],
                  },
                },
                screeningCriteria: {
                  anyOf: [
                    {
                      type: 'string',
                      enum: ['Yes', 'No'],
                    },
                    {
                      type: 'string',
                    },
                    {
                      type: 'array',
                      items: {
                        type: 'string',
                      },
                    },
                    {
                      type: 'object',
                      properties: {
                        equalTo: {
                          type: 'number',
                        },
                        moreThan: {
                          type: 'number',
                        },
                        moreThanOrEqualTo: {
                          type: 'number',
                        },
                        lessThan: {
                          type: 'number',
                        },
                        lessThanOrEqualTo: {
                          type: 'number',
                        },
                        range: {
                          type: 'array',
                          items: {
                            type: 'number',
                          },
                        },
                      },
                    },
                    {
                      type: 'boolean',
                    },
                    {
                      nullable: true,
                    },
                  ],
                },
              },
              required: ['key', 'label', 'type', 'required'],
            },
          },
        },
        required: ['questions'],
      },
      minItems: 1,
    },
  },
  required: ['title', 'status', 'company_id', 'pipeline_id', 'pages'],
} as const;

export const $Job = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_by_user_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    updated_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    archived_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    company_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    location_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    department_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    non_negotiables: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    evaluation_criteria: {
      type: 'object',
      nullable: true,
      properties: {
        education: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        certifications: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        total_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        relevant_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        skills: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        previous_roles: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
      },
      required: [
        'education',
        'certifications',
        'total_experience',
        'relevant_experience',
        'skills',
        'previous_roles',
      ],
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'delay_email_in_minutes',
    'ideal_candidate_description',
    'pipeline_id',
    'created_by_user_id',
    'updated_by_user_id',
    'archived_by_user_id',
    'company_id',
    'location_id',
    'department_id',
    'non_negotiables',
    'evaluation_criteria',
  ],
} as const;

export const $GetJobsResponseDTO = {
  type: 'object',
  properties: {
    total_pages: {
      type: 'number',
    },
    current_page: {
      type: 'number',
    },
    next_page: {
      type: 'number',
      nullable: true,
    },
    previous_page: {
      type: 'number',
      nullable: true,
    },
    records: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Job',
      },
    },
    total_records: {
      type: 'number',
    },
  },
  required: [
    'total_pages',
    'current_page',
    'next_page',
    'previous_page',
    'records',
    'total_records',
  ],
} as const;

export const $GetJobResponseDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_by_user_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    updated_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    archived_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    non_negotiables: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    evaluation_criteria: {
      type: 'object',
      nullable: true,
      properties: {
        education: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        certifications: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        total_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        relevant_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        skills: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        previous_roles: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
      },
      required: [
        'education',
        'certifications',
        'total_experience',
        'relevant_experience',
        'skills',
        'previous_roles',
      ],
    },
    total_applications: {
      type: 'number',
    },
    uploaded_resumes: {
      type: 'number',
    },
    completed_assessments: {
      type: 'number',
    },
    s3_import_candidates_link: {
      type: 'string',
      nullable: true,
    },
    company: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        slug: {
          type: 'string',
        },
        logo_file_path: {
          type: 'string',
          nullable: true,
        },
        s3_logo_link: {
          type: 'string',
          nullable: true,
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'name',
        'slug',
        'logo_file_path',
        's3_logo_link',
      ],
    },
    location: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    department: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    job_application_template: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        pages: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              questions: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    key: {
                      type: 'string',
                      minLength: 1,
                    },
                    label: {
                      type: 'string',
                      minLength: 1,
                    },
                    type: {
                      type: 'string',
                      enum: [
                        'SHORT_TEXT',
                        'LONG_TEXT',
                        'MULTIPLE_CHOICE',
                        'SINGLE_CHOICE',
                        'YES_NO',
                        'FILE_UPLOAD',
                        'NUMBER',
                        'CHECKBOX',
                      ],
                    },
                    required: {
                      type: 'boolean',
                    },
                    options: {
                      type: 'array',
                      nullable: true,
                      items: {
                        anyOf: [
                          {
                            type: 'string',
                          },
                          {
                            type: 'number',
                          },
                        ],
                      },
                    },
                    screeningCriteria: {
                      anyOf: [
                        {
                          type: 'string',
                          enum: ['Yes', 'No'],
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          type: 'object',
                          properties: {
                            equalTo: {
                              type: 'number',
                            },
                            moreThan: {
                              type: 'number',
                            },
                            moreThanOrEqualTo: {
                              type: 'number',
                            },
                            lessThan: {
                              type: 'number',
                            },
                            lessThanOrEqualTo: {
                              type: 'number',
                            },
                            range: {
                              type: 'array',
                              items: {
                                type: 'number',
                              },
                            },
                          },
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                  },
                  required: ['key', 'label', 'type', 'required'],
                },
              },
            },
            required: ['questions'],
          },
        },
      },
      required: ['id', 'created_at', 'updated_at', 'archived_at', 'pages'],
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'delay_email_in_minutes',
    'ideal_candidate_description',
    'pipeline_id',
    'created_by_user_id',
    'updated_by_user_id',
    'archived_by_user_id',
    'non_negotiables',
    'evaluation_criteria',
    'total_applications',
    'uploaded_resumes',
    'completed_assessments',
    'company',
    'location',
    'department',
    'job_application_template',
  ],
} as const;

export const $UpdateJobResponseDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_by_user_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    updated_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    archived_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    company_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    location_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    department_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    non_negotiables: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    evaluation_criteria: {
      type: 'object',
      nullable: true,
      properties: {
        education: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        certifications: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        total_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        relevant_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        skills: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        previous_roles: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
      },
      required: [
        'education',
        'certifications',
        'total_experience',
        'relevant_experience',
        'skills',
        'previous_roles',
      ],
    },
    job_application_template: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        is_test: {
          type: 'boolean',
        },
        pages: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              questions: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    key: {
                      type: 'string',
                      minLength: 1,
                    },
                    label: {
                      type: 'string',
                      minLength: 1,
                    },
                    type: {
                      type: 'string',
                      enum: [
                        'SHORT_TEXT',
                        'LONG_TEXT',
                        'MULTIPLE_CHOICE',
                        'SINGLE_CHOICE',
                        'YES_NO',
                        'FILE_UPLOAD',
                        'NUMBER',
                        'CHECKBOX',
                      ],
                    },
                    required: {
                      type: 'boolean',
                    },
                    options: {
                      type: 'array',
                      nullable: true,
                      items: {
                        anyOf: [
                          {
                            type: 'string',
                          },
                          {
                            type: 'number',
                          },
                        ],
                      },
                    },
                    screeningCriteria: {
                      anyOf: [
                        {
                          type: 'string',
                          enum: ['Yes', 'No'],
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          type: 'object',
                          properties: {
                            equalTo: {
                              type: 'number',
                            },
                            moreThan: {
                              type: 'number',
                            },
                            moreThanOrEqualTo: {
                              type: 'number',
                            },
                            lessThan: {
                              type: 'number',
                            },
                            lessThanOrEqualTo: {
                              type: 'number',
                            },
                            range: {
                              type: 'array',
                              items: {
                                type: 'number',
                              },
                            },
                          },
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                  },
                  required: ['key', 'label', 'type', 'required'],
                },
              },
            },
            required: ['questions'],
          },
        },
        created_by_user_id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        updated_by_user_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        archived_by_user_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        job_id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'is_test',
        'pages',
        'created_by_user_id',
        'updated_by_user_id',
        'archived_by_user_id',
        'job_id',
      ],
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'delay_email_in_minutes',
    'ideal_candidate_description',
    'pipeline_id',
    'created_by_user_id',
    'updated_by_user_id',
    'archived_by_user_id',
    'company_id',
    'location_id',
    'department_id',
    'non_negotiables',
    'evaluation_criteria',
    'job_application_template',
  ],
} as const;

export const $UpdateJobRequestBodyDTO = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      minLength: 1,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    company_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    is_test: {
      type: 'boolean',
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    non_negotiables: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    evaluation_criteria: {
      type: 'object',
      nullable: true,
      properties: {
        education: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        certifications: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        total_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        relevant_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        skills: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        previous_roles: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
      },
      required: [
        'education',
        'certifications',
        'total_experience',
        'relevant_experience',
        'skills',
        'previous_roles',
      ],
    },
    department_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    location_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    pages: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          questions: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                key: {
                  type: 'string',
                  minLength: 1,
                },
                label: {
                  type: 'string',
                  minLength: 1,
                },
                type: {
                  type: 'string',
                  enum: [
                    'SHORT_TEXT',
                    'LONG_TEXT',
                    'MULTIPLE_CHOICE',
                    'SINGLE_CHOICE',
                    'YES_NO',
                    'FILE_UPLOAD',
                    'NUMBER',
                    'CHECKBOX',
                  ],
                },
                required: {
                  type: 'boolean',
                },
                options: {
                  type: 'array',
                  nullable: true,
                  items: {
                    anyOf: [
                      {
                        type: 'string',
                      },
                      {
                        type: 'number',
                      },
                    ],
                  },
                },
                screeningCriteria: {
                  anyOf: [
                    {
                      type: 'string',
                      enum: ['Yes', 'No'],
                    },
                    {
                      type: 'string',
                    },
                    {
                      type: 'array',
                      items: {
                        type: 'string',
                      },
                    },
                    {
                      type: 'object',
                      properties: {
                        equalTo: {
                          type: 'number',
                        },
                        moreThan: {
                          type: 'number',
                        },
                        moreThanOrEqualTo: {
                          type: 'number',
                        },
                        lessThan: {
                          type: 'number',
                        },
                        lessThanOrEqualTo: {
                          type: 'number',
                        },
                        range: {
                          type: 'array',
                          items: {
                            type: 'number',
                          },
                        },
                      },
                    },
                    {
                      type: 'boolean',
                    },
                    {
                      nullable: true,
                    },
                  ],
                },
              },
              required: ['key', 'label', 'type', 'required'],
            },
          },
        },
        required: ['questions'],
      },
      minItems: 1,
    },
    job_application_template_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
  },
  required: ['job_application_template_id'],
} as const;

export const $DeleteJobResponseDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_by_user_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    updated_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    archived_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    non_negotiables: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    evaluation_criteria: {
      type: 'object',
      nullable: true,
      properties: {
        education: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        certifications: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        total_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        relevant_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        skills: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        previous_roles: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
      },
      required: [
        'education',
        'certifications',
        'total_experience',
        'relevant_experience',
        'skills',
        'previous_roles',
      ],
    },
    total_applications: {
      type: 'number',
    },
    uploaded_resumes: {
      type: 'number',
    },
    completed_assessments: {
      type: 'number',
    },
    s3_import_candidates_link: {
      type: 'string',
      nullable: true,
    },
    company: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        slug: {
          type: 'string',
        },
        logo_file_path: {
          type: 'string',
          nullable: true,
        },
        s3_logo_link: {
          type: 'string',
          nullable: true,
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'name',
        'slug',
        'logo_file_path',
        's3_logo_link',
      ],
    },
    location: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    department: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    job_application_template: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        pages: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              questions: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    key: {
                      type: 'string',
                      minLength: 1,
                    },
                    label: {
                      type: 'string',
                      minLength: 1,
                    },
                    type: {
                      type: 'string',
                      enum: [
                        'SHORT_TEXT',
                        'LONG_TEXT',
                        'MULTIPLE_CHOICE',
                        'SINGLE_CHOICE',
                        'YES_NO',
                        'FILE_UPLOAD',
                        'NUMBER',
                        'CHECKBOX',
                      ],
                    },
                    required: {
                      type: 'boolean',
                    },
                    options: {
                      type: 'array',
                      nullable: true,
                      items: {
                        anyOf: [
                          {
                            type: 'string',
                          },
                          {
                            type: 'number',
                          },
                        ],
                      },
                    },
                    screeningCriteria: {
                      anyOf: [
                        {
                          type: 'string',
                          enum: ['Yes', 'No'],
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          type: 'object',
                          properties: {
                            equalTo: {
                              type: 'number',
                            },
                            moreThan: {
                              type: 'number',
                            },
                            moreThanOrEqualTo: {
                              type: 'number',
                            },
                            lessThan: {
                              type: 'number',
                            },
                            lessThanOrEqualTo: {
                              type: 'number',
                            },
                            range: {
                              type: 'array',
                              items: {
                                type: 'number',
                              },
                            },
                          },
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                  },
                  required: ['key', 'label', 'type', 'required'],
                },
              },
            },
            required: ['questions'],
          },
        },
      },
      required: ['id', 'created_at', 'updated_at', 'archived_at', 'pages'],
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'delay_email_in_minutes',
    'ideal_candidate_description',
    'pipeline_id',
    'created_by_user_id',
    'updated_by_user_id',
    'archived_by_user_id',
    'non_negotiables',
    'evaluation_criteria',
    'total_applications',
    'uploaded_resumes',
    'completed_assessments',
    'company',
    'location',
    'department',
    'job_application_template',
  ],
} as const;

export const $ArchiveJobResponseDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['ACTIVE', 'INACTIVE'],
    },
    delay_email_in_minutes: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    ideal_candidate_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    pipeline_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_by_user_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    updated_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    archived_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    non_negotiables: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    evaluation_criteria: {
      type: 'object',
      nullable: true,
      properties: {
        education: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        certifications: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        total_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        relevant_experience: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        skills: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
        previous_roles: {
          type: 'number',
          minimum: 0,
          maximum: 1,
        },
      },
      required: [
        'education',
        'certifications',
        'total_experience',
        'relevant_experience',
        'skills',
        'previous_roles',
      ],
    },
    total_applications: {
      type: 'number',
    },
    uploaded_resumes: {
      type: 'number',
    },
    completed_assessments: {
      type: 'number',
    },
    s3_import_candidates_link: {
      type: 'string',
      nullable: true,
    },
    company: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        slug: {
          type: 'string',
        },
        logo_file_path: {
          type: 'string',
          nullable: true,
        },
        s3_logo_link: {
          type: 'string',
          nullable: true,
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'name',
        'slug',
        'logo_file_path',
        's3_logo_link',
      ],
    },
    location: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    department: {
      type: 'object',
      nullable: true,
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        name: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: ['id', 'created_at', 'updated_at', 'name', 'company_id'],
    },
    job_application_template: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        pages: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              questions: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    key: {
                      type: 'string',
                      minLength: 1,
                    },
                    label: {
                      type: 'string',
                      minLength: 1,
                    },
                    type: {
                      type: 'string',
                      enum: [
                        'SHORT_TEXT',
                        'LONG_TEXT',
                        'MULTIPLE_CHOICE',
                        'SINGLE_CHOICE',
                        'YES_NO',
                        'FILE_UPLOAD',
                        'NUMBER',
                        'CHECKBOX',
                      ],
                    },
                    required: {
                      type: 'boolean',
                    },
                    options: {
                      type: 'array',
                      nullable: true,
                      items: {
                        anyOf: [
                          {
                            type: 'string',
                          },
                          {
                            type: 'number',
                          },
                        ],
                      },
                    },
                    screeningCriteria: {
                      anyOf: [
                        {
                          type: 'string',
                          enum: ['Yes', 'No'],
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          type: 'object',
                          properties: {
                            equalTo: {
                              type: 'number',
                            },
                            moreThan: {
                              type: 'number',
                            },
                            moreThanOrEqualTo: {
                              type: 'number',
                            },
                            lessThan: {
                              type: 'number',
                            },
                            lessThanOrEqualTo: {
                              type: 'number',
                            },
                            range: {
                              type: 'array',
                              items: {
                                type: 'number',
                              },
                            },
                          },
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                  },
                  required: ['key', 'label', 'type', 'required'],
                },
              },
            },
            required: ['questions'],
          },
        },
      },
      required: ['id', 'created_at', 'updated_at', 'archived_at', 'pages'],
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'delay_email_in_minutes',
    'ideal_candidate_description',
    'pipeline_id',
    'created_by_user_id',
    'updated_by_user_id',
    'archived_by_user_id',
    'non_negotiables',
    'evaluation_criteria',
    'total_applications',
    'uploaded_resumes',
    'completed_assessments',
    'company',
    'location',
    'department',
    'job_application_template',
  ],
} as const;

export const $ApplyJobResponseDTO = {
  type: 'object',
  properties: {
    candidate_reference: {
      type: 'string',
    },
    candidate_application_link: {
      type: 'string',
      format: 'uri',
    },
    survey_result: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        last_score_calculation_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        application_responses: {
          type: 'array',
          nullable: true,
          items: {
            type: 'object',
            properties: {
              question: {
                type: 'string',
              },
              response: {
                type: 'string',
              },
            },
            required: ['question', 'response'],
          },
        },
        company: {
          type: 'string',
        },
        company_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        company_slug: {
          type: 'string',
          nullable: true,
        },
        checked: {
          type: 'string',
          nullable: true,
        },
        countryCode: {
          type: 'string',
        },
        city: {
          type: 'string',
        },
        column_position: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        department_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        location_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        e3_adjectives: {
          type: 'string',
          nullable: true,
        },
        e3_chart: {
          type: 'string',
          nullable: true,
        },
        e3_scales: {
          type: 'string',
          nullable: true,
        },
        e3_scales21: {
          type: 'string',
          nullable: true,
        },
        email: {
          type: 'string',
          format: 'email',
        },
        first: {
          type: 'string',
        },
        industry: {
          type: 'string',
        },
        ip: {
          type: 'string',
        },
        is_test: {
          type: 'boolean',
        },
        last: {
          type: 'string',
        },
        misc: {
          type: 'string',
        },
        phone: {
          type: 'string',
          nullable: true,
        },
        status: {
          type: 'string',
        },
        region: {
          type: 'string',
        },
        region_name: {
          type: 'string',
        },
        role: {
          type: 'string',
        },
        sid: {
          type: 'string',
        },
        starred: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        time_to_complete_in_minutes: {
          type: 'string',
          nullable: true,
        },
        utm_campaign: {
          type: 'string',
        },
        utm_content: {
          type: 'string',
        },
        utm_medium: {
          type: 'string',
        },
        utm_source: {
          type: 'string',
        },
        utm_term: {
          type: 'string',
        },
        zip: {
          type: 'string',
        },
        resume_link: {
          type: 'string',
          nullable: true,
        },
        resume_file_path: {
          type: 'string',
          nullable: true,
        },
        resume_file_name: {
          type: 'string',
          nullable: true,
        },
        resume_file_mime_type: {
          type: 'string',
          nullable: true,
        },
        resume_uploaded_by_user_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        legacy_table_name: {
          type: 'string',
          nullable: true,
        },
        legacy_table_id: {
          type: 'integer',
          nullable: true,
          minimum: 0,
          exclusiveMinimum: true,
        },
        pipeline_id: {
          type: 'string',
          nullable: true,
        },
        pipeline_stage_id: {
          type: 'string',
          nullable: true,
        },
        stage_id: {
          type: 'number',
          nullable: true,
        },
        opportunity_id: {
          type: 'string',
          nullable: true,
        },
        contact_id: {
          type: 'string',
          nullable: true,
        },
        language_registered: {
          type: 'string',
          nullable: true,
        },
        language_submitted: {
          type: 'string',
          nullable: true,
        },
        imported_checksum: {
          type: 'string',
          nullable: true,
        },
      },
      required: [
        'id',
        'created',
        'updated_at',
        'archived_at',
        'last_score_calculation_at',
        'application_responses',
        'company',
        'company_id',
        'company_slug',
        'checked',
        'countryCode',
        'city',
        'column_position',
        'department_id',
        'location_id',
        'e3_adjectives',
        'e3_chart',
        'e3_scales',
        'e3_scales21',
        'email',
        'first',
        'industry',
        'ip',
        'is_test',
        'last',
        'misc',
        'phone',
        'status',
        'region',
        'region_name',
        'role',
        'sid',
        'starred',
        'time_to_complete_in_minutes',
        'utm_campaign',
        'utm_content',
        'utm_medium',
        'utm_source',
        'utm_term',
        'zip',
        'resume_link',
        'resume_file_path',
        'resume_file_name',
        'resume_file_mime_type',
        'resume_uploaded_by_user_id',
        'legacy_table_name',
        'legacy_table_id',
        'pipeline_id',
        'pipeline_stage_id',
        'stage_id',
        'opportunity_id',
        'contact_id',
        'language_registered',
        'language_submitted',
        'imported_checksum',
      ],
    },
    job_application_response: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        created_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        updated_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        archived_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        is_test: {
          type: 'boolean',
        },
        title: {
          type: 'string',
          minLength: 1,
        },
        raw_description: {
          type: 'string',
          nullable: true,
          maxLength: 10000,
        },
        benchmark: {
          type: 'string',
          nullable: true,
        },
        status: {
          type: 'string',
          enum: ['IN_PROGRESS', 'SUBMITTED', 'ACCEPTED', 'REJECTED'],
        },
        pages: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              questions: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    key: {
                      type: 'string',
                      minLength: 1,
                    },
                    label: {
                      type: 'string',
                      minLength: 1,
                    },
                    type: {
                      type: 'string',
                      enum: [
                        'SHORT_TEXT',
                        'LONG_TEXT',
                        'MULTIPLE_CHOICE',
                        'SINGLE_CHOICE',
                        'YES_NO',
                        'FILE_UPLOAD',
                        'NUMBER',
                        'CHECKBOX',
                      ],
                    },
                    required: {
                      type: 'boolean',
                    },
                    options: {
                      type: 'array',
                      nullable: true,
                      items: {
                        anyOf: [
                          {
                            type: 'string',
                          },
                          {
                            type: 'number',
                          },
                        ],
                      },
                    },
                    screeningCriteria: {
                      anyOf: [
                        {
                          type: 'string',
                          enum: ['Yes', 'No'],
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          type: 'object',
                          properties: {
                            equalTo: {
                              type: 'number',
                            },
                            moreThan: {
                              type: 'number',
                            },
                            moreThanOrEqualTo: {
                              type: 'number',
                            },
                            lessThan: {
                              type: 'number',
                            },
                            lessThanOrEqualTo: {
                              type: 'number',
                            },
                            range: {
                              type: 'array',
                              items: {
                                type: 'number',
                              },
                            },
                          },
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                    value: {
                      anyOf: [
                        {
                          type: 'string',
                        },
                        {
                          type: 'number',
                        },
                        {
                          type: 'boolean',
                        },
                        {
                          type: 'array',
                          items: {
                            type: 'string',
                          },
                        },
                        {
                          nullable: true,
                        },
                      ],
                    },
                    is_passed: {
                      type: 'boolean',
                      nullable: true,
                    },
                  },
                  required: ['key', 'label', 'type', 'required', 'value'],
                },
              },
            },
            required: ['questions'],
          },
        },
        last_page_index: {
          type: 'integer',
          minimum: 0,
        },
        candidate_reference: {
          type: 'string',
          nullable: true,
        },
        opt_in_communications: {
          type: 'boolean',
        },
        opt_in_communications_at: {
          anyOf: [
            {
              type: 'string',
              nullable: true,
            },
            {
              type: 'string',
            },
            {
              nullable: true,
            },
          ],
        },
        job_id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
        survey_result_id: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: true,
        },
      },
      required: [
        'id',
        'created_at',
        'updated_at',
        'archived_at',
        'is_test',
        'title',
        'raw_description',
        'benchmark',
        'status',
        'pages',
        'last_page_index',
        'candidate_reference',
        'opt_in_communications',
        'opt_in_communications_at',
        'job_id',
        'survey_result_id',
      ],
    },
  },
  required: [
    'candidate_reference',
    'candidate_application_link',
    'survey_result',
    'job_application_response',
  ],
} as const;

export const $UploadPresignedUrlForImportCandidatesUploadPresignedUrlResponseDTO = {
  type: 'object',
  properties: {
    job_id: {
      type: 'number',
    },
    file_path: {
      type: 'string',
    },
    file_name: {
      type: 'string',
    },
    file_mime_type: {
      type: 'string',
      nullable: true,
    },
    presigned_url: {
      type: 'string',
    },
    import_checksum: {
      type: 'string',
    },
  },
  required: [
    'job_id',
    'file_path',
    'file_name',
    'file_mime_type',
    'presigned_url',
    'import_checksum',
  ],
} as const;

export const $UpdateImportCandidatesStatusResponseDTO = {
  type: 'object',
  properties: {
    job_id: {
      type: 'number',
    },
    status: {
      type: 'string',
      enum: ['FILE_UPLOADING', 'FILE_UPLOADED', 'IN_PROGRESS', 'COMPLETED', 'FAILED'],
    },
  },
  required: ['job_id', 'status'],
} as const;

export const $GetImportCandidatesStatusResponseDTO = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    status: {
      type: 'string',
      enum: ['FILE_UPLOADING', 'FILE_UPLOADED', 'IN_PROGRESS', 'COMPLETED', 'FAILED'],
    },
    file_path: {
      type: 'string',
      maxLength: 10000,
    },
    checksum: {
      type: 'string',
    },
    total_records: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    total_records_processed: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    total_records_with_duplicates: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    total_records_with_errors: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    job_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    s3_link: {
      type: 'string',
    },
  },
  required: [
    'id',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'status',
    'file_path',
    'checksum',
    'total_records',
    'total_records_processed',
    'total_records_with_duplicates',
    'total_records_with_errors',
    'job_id',
    's3_link',
  ],
} as const;

export const $JobApplicationTemplate = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    pages: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          questions: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                key: {
                  type: 'string',
                  minLength: 1,
                },
                label: {
                  type: 'string',
                  minLength: 1,
                },
                type: {
                  type: 'string',
                  enum: [
                    'SHORT_TEXT',
                    'LONG_TEXT',
                    'MULTIPLE_CHOICE',
                    'SINGLE_CHOICE',
                    'YES_NO',
                    'FILE_UPLOAD',
                    'NUMBER',
                    'CHECKBOX',
                  ],
                },
                required: {
                  type: 'boolean',
                },
                options: {
                  type: 'array',
                  nullable: true,
                  items: {
                    anyOf: [
                      {
                        type: 'string',
                      },
                      {
                        type: 'number',
                      },
                    ],
                  },
                },
                screeningCriteria: {
                  anyOf: [
                    {
                      type: 'string',
                      enum: ['Yes', 'No'],
                    },
                    {
                      type: 'string',
                    },
                    {
                      type: 'array',
                      items: {
                        type: 'string',
                      },
                    },
                    {
                      type: 'object',
                      properties: {
                        equalTo: {
                          type: 'number',
                        },
                        moreThan: {
                          type: 'number',
                        },
                        moreThanOrEqualTo: {
                          type: 'number',
                        },
                        lessThan: {
                          type: 'number',
                        },
                        lessThanOrEqualTo: {
                          type: 'number',
                        },
                        range: {
                          type: 'array',
                          items: {
                            type: 'number',
                          },
                        },
                      },
                    },
                    {
                      type: 'boolean',
                    },
                    {
                      nullable: true,
                    },
                  ],
                },
              },
              required: ['key', 'label', 'type', 'required'],
            },
          },
        },
        required: ['questions'],
      },
    },
    created_by_user_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    updated_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    archived_by_user_id: {
      type: 'integer',
      nullable: true,
      minimum: 0,
      exclusiveMinimum: true,
    },
    job_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
  },
  required: [
    'id',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'pages',
    'created_by_user_id',
    'updated_by_user_id',
    'archived_by_user_id',
    'job_id',
  ],
} as const;

export const $JobApplicationResponse = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    title: {
      type: 'string',
      minLength: 1,
    },
    raw_description: {
      type: 'string',
      nullable: true,
      maxLength: 10000,
    },
    benchmark: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      enum: ['IN_PROGRESS', 'SUBMITTED', 'ACCEPTED', 'REJECTED'],
    },
    pages: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          questions: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                key: {
                  type: 'string',
                  minLength: 1,
                },
                label: {
                  type: 'string',
                  minLength: 1,
                },
                type: {
                  type: 'string',
                  enum: [
                    'SHORT_TEXT',
                    'LONG_TEXT',
                    'MULTIPLE_CHOICE',
                    'SINGLE_CHOICE',
                    'YES_NO',
                    'FILE_UPLOAD',
                    'NUMBER',
                    'CHECKBOX',
                  ],
                },
                required: {
                  type: 'boolean',
                },
                options: {
                  type: 'array',
                  nullable: true,
                  items: {
                    anyOf: [
                      {
                        type: 'string',
                      },
                      {
                        type: 'number',
                      },
                    ],
                  },
                },
                screeningCriteria: {
                  anyOf: [
                    {
                      type: 'string',
                      enum: ['Yes', 'No'],
                    },
                    {
                      type: 'string',
                    },
                    {
                      type: 'array',
                      items: {
                        type: 'string',
                      },
                    },
                    {
                      type: 'object',
                      properties: {
                        equalTo: {
                          type: 'number',
                        },
                        moreThan: {
                          type: 'number',
                        },
                        moreThanOrEqualTo: {
                          type: 'number',
                        },
                        lessThan: {
                          type: 'number',
                        },
                        lessThanOrEqualTo: {
                          type: 'number',
                        },
                        range: {
                          type: 'array',
                          items: {
                            type: 'number',
                          },
                        },
                      },
                    },
                    {
                      type: 'boolean',
                    },
                    {
                      nullable: true,
                    },
                  ],
                },
                value: {
                  anyOf: [
                    {
                      type: 'string',
                    },
                    {
                      type: 'number',
                    },
                    {
                      type: 'boolean',
                    },
                    {
                      type: 'array',
                      items: {
                        type: 'string',
                      },
                    },
                    {
                      nullable: true,
                    },
                  ],
                },
                is_passed: {
                  type: 'boolean',
                  nullable: true,
                },
              },
              required: ['key', 'label', 'type', 'required', 'value'],
            },
          },
        },
        required: ['questions'],
      },
    },
    last_page_index: {
      type: 'integer',
      minimum: 0,
    },
    candidate_reference: {
      type: 'string',
      nullable: true,
    },
    opt_in_communications: {
      type: 'boolean',
    },
    opt_in_communications_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    job_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    survey_result_id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
  },
  required: [
    'id',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'title',
    'raw_description',
    'benchmark',
    'status',
    'pages',
    'last_page_index',
    'candidate_reference',
    'opt_in_communications',
    'opt_in_communications_at',
    'job_id',
    'survey_result_id',
  ],
} as const;

export const $UpdateJobApplicationResponseRequestBodyDTO = {
  type: 'object',
  properties: {
    last_page_index: {
      type: 'integer',
      minimum: 0,
    },
    opt_in_communications: {
      type: 'boolean',
    },
    pages: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          questions: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                key: {
                  type: 'string',
                  minLength: 1,
                },
                label: {
                  type: 'string',
                  minLength: 1,
                },
                type: {
                  type: 'string',
                  enum: [
                    'SHORT_TEXT',
                    'LONG_TEXT',
                    'MULTIPLE_CHOICE',
                    'SINGLE_CHOICE',
                    'YES_NO',
                    'FILE_UPLOAD',
                    'NUMBER',
                    'CHECKBOX',
                  ],
                },
                required: {
                  type: 'boolean',
                },
                options: {
                  type: 'array',
                  nullable: true,
                  items: {
                    anyOf: [
                      {
                        type: 'string',
                      },
                      {
                        type: 'number',
                      },
                    ],
                  },
                },
                screeningCriteria: {
                  anyOf: [
                    {
                      type: 'string',
                      enum: ['Yes', 'No'],
                    },
                    {
                      type: 'string',
                    },
                    {
                      type: 'array',
                      items: {
                        type: 'string',
                      },
                    },
                    {
                      type: 'object',
                      properties: {
                        equalTo: {
                          type: 'number',
                        },
                        moreThan: {
                          type: 'number',
                        },
                        moreThanOrEqualTo: {
                          type: 'number',
                        },
                        lessThan: {
                          type: 'number',
                        },
                        lessThanOrEqualTo: {
                          type: 'number',
                        },
                        range: {
                          type: 'array',
                          items: {
                            type: 'number',
                          },
                        },
                      },
                    },
                    {
                      type: 'boolean',
                    },
                    {
                      nullable: true,
                    },
                  ],
                },
                value: {
                  anyOf: [
                    {
                      type: 'string',
                    },
                    {
                      type: 'number',
                    },
                    {
                      type: 'boolean',
                    },
                    {
                      type: 'array',
                      items: {
                        type: 'string',
                      },
                    },
                    {
                      nullable: true,
                    },
                  ],
                },
                is_passed: {
                  type: 'boolean',
                  nullable: true,
                },
              },
              required: ['key', 'label', 'type', 'required', 'value'],
            },
          },
        },
        required: ['questions'],
      },
    },
  },
  required: ['pages'],
} as const;

export const $GetJobApplicationResponsesResponseDTO = {
  type: 'object',
  properties: {
    total_pages: {
      type: 'number',
    },
    current_page: {
      type: 'number',
    },
    next_page: {
      type: 'number',
      nullable: true,
    },
    previous_page: {
      type: 'number',
      nullable: true,
    },
    records: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobApplicationResponse',
      },
    },
    total_records: {
      type: 'number',
    },
  },
  required: [
    'total_pages',
    'current_page',
    'next_page',
    'previous_page',
    'records',
    'total_records',
  ],
} as const;

export const $GetPipelinesResponseDTO = {
  type: 'array',
  items: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      created_at: {
        type: 'string',
      },
      updated_at: {
        type: 'string',
      },
      name: {
        type: 'string',
      },
      ghl_id: {
        type: 'string',
        nullable: true,
      },
      company_id: {
        type: 'number',
      },
      deleted_at: {
        type: 'string',
        nullable: true,
      },
      stages: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            id: {
              type: 'string',
            },
            created_at: {
              type: 'string',
            },
            updated_at: {
              type: 'string',
            },
            name: {
              type: 'string',
            },
            position: {
              type: 'number',
            },
            ghl_id: {
              type: 'string',
              nullable: true,
            },
            pipeline_id: {
              type: 'string',
            },
            deleted_at: {
              type: 'string',
              nullable: true,
            },
          },
          required: [
            'id',
            'created_at',
            'updated_at',
            'name',
            'position',
            'ghl_id',
            'pipeline_id',
            'deleted_at',
          ],
        },
      },
    },
    required: [
      'id',
      'created_at',
      'updated_at',
      'name',
      'ghl_id',
      'company_id',
      'deleted_at',
      'stages',
    ],
  },
} as const;

export const $TraitScaleMappingReport = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      minimum: 0,
      exclusiveMinimum: true,
    },
    uuid: {
      type: 'string',
      format: 'uuid',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    archived_at: {
      anyOf: [
        {
          type: 'string',
          nullable: true,
        },
        {
          type: 'string',
        },
        {
          nullable: true,
        },
      ],
    },
    is_test: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    strong_weight: {
      type: 'number',
      nullable: true,
    },
    moderate_weight: {
      type: 'number',
      nullable: true,
    },
    is_active: {
      type: 'boolean',
    },
    thresholds: {
      type: 'array',
      items: {
        nullable: true,
      },
    },
    sections: {
      type: 'array',
      items: {
        nullable: true,
      },
    },
  },
  required: [
    'id',
    'uuid',
    'created_at',
    'updated_at',
    'archived_at',
    'is_test',
    'name',
    'description',
    'strong_weight',
    'moderate_weight',
    'is_active',
    'thresholds',
    'sections',
  ],
} as const;
